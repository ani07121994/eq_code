 package model;

import java.math.BigDecimal;
import ap.qantas.com.ebsCalculateWHTAmountService.*;

import ap.qantas.com.eQApprovalDetailsService.LineItemTable;
import java.util.Date;
import java.sql.Connection;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.text.SimpleDateFormat;

import java.util.ArrayList;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import model.common.APOperationAM;

import model.views.eQApproverDetailsImpl;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCBindingContainer;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeList;
import oracle.jbo.JboSQLException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import java.util.Random;

import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 15 12:58:44 IST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class APOperationAMImpl extends ApplicationModuleImpl implements APOperationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public APOperationAMImpl() {
    }

    /**
     * Container's getter for HeaderDetailsEOView1.
     * @return HeaderDetailsEOView1
     */
    public ViewObjectImpl getHeaderDetailsEOView1() {
        return (ViewObjectImpl)findViewObject("HeaderDetailsEOView1");
    }
     //  added by sourav and santha
    public ViewObjectImpl getSitesVO() {
        return (ViewObjectImpl)findViewObject("SitesVO1");
    }
    //  added by sourav and santha
    public ViewObjectImpl getSitesDetailsVO() {
        return (ViewObjectImpl)findViewObject("SitesDetailsVO1");
    }
    /**
     * Container's getter for LineItemDetailsEOView1.
     * @return LineItemDetailsEOView1
     */
    public ViewObjectImpl getLineItemDetailsEOView1() {
        return (ViewObjectImpl)findViewObject("LineItemDetailsEOView1");
    }

    /**
     * Container's getter for HeaderDetailsEOView2.
     * @return HeaderDetailsEOView2
     */
    public ViewObjectImpl getHeaderDetailsEOView2() {
        return (ViewObjectImpl)findViewObject("HeaderDetailsEOView2");
    }

    /**
     * Container's getter for LineItemDetailsEOView2.
     * @return LineItemDetailsEOView2
     */
    public ViewObjectImpl getLineItemDetailsEOView2() {
        return (ViewObjectImpl)findViewObject("LineItemDetailsEOView2");
    }

    /**
     * Container's getter for ApLineitemTableApInvoFk1Link1.
     * @return ApLineitemTableApInvoFk1Link1
     */
    public ViewLinkImpl getApLineitemTableApInvoFk1Link1() {
        return (ViewLinkImpl)findViewLink("ApLineitemTableApInvoFk1Link1");
    }
    
    
    public void modifyLineItemDetails(String invoiceId,String whtCode,String pageName,boolean WHTFlagOnPageLoad) {
        System.out.println("Start: modifyLineItemDetails()" + new Date());
        System.out.println("default wht code");
        RowSetIterator rowSetIterator = null;
        try{       
        SequenceImpl seq = new SequenceImpl("LINE_ID_SEQ", getDBTransaction());
          Number seqNextval = seq.getSequenceNumber();
          String seqVal = seqNextval.toString();
            
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("LineItemDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                
                int lineNo=1; //sequencing line number from ADF'S end if it is coming null from BPM
                boolean lineResetFlag=false;
                /*Start :Sequencing line number */
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) { 
                        if(row.getAttribute("LineNumber") ==null){
                            lineResetFlag=true;
                            System.out.println("Setting lineResetFlag to true");
                            break;
                        }
                
                    }
                }
                rowSetIterator.reset(); //resetting the rowset 
                
               /* if(lineResetFlag){
                    System.out.println("Reseting line no of lineitem table ");
                    while(rowSetIterator.hasNext()) {
                        Row row = rowSetIterator.next();
                        if (null != row) { 
                                row.setAttribute("LineNumber", null);
                        }
                    }
                }*/
                
                
                /*Ends :Sequencing line number */
                
                
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {   
                        /* Commented on 5th MAY 2017
                                                * 
                                                * if(row.getAttribute("LineType")!=null) {
                                                   String lineType = (String)row.getAttribute("LineType");
                                                   if(lineType!=null && lineType.trim().equalsIgnoreCase("ADJ LINE")) {
                                                       row.setAttribute("LineType", "ADJUSTMENT LINE");
                                                   }
                                                   
                                                   if(lineType!=null && 
                                                      !(   lineType.trim().equalsIgnoreCase("TAXABLE LINE") || 
                                                           lineType.trim().equalsIgnoreCase("ADJUSTMENT LINE") || 
                                                           lineType.trim().equalsIgnoreCase("NON TAXABLE LINE") || 
                                                           lineType.trim().equalsIgnoreCase("ADJ LINE") 
                                                      )) {
                                                       row.setAttribute("LineType", null);
                                                   }
                                               }*/
                                               /* 5th MAY 2017::  Linetype if empty  to be defaulted to line ( allowed linetype values :  LINE, FREIGHT, AOG) */
                         if(row.getAttribute("LineType") !=null){
                            String lineType = (String)row.getAttribute("LineType");
                                if(lineType!=null && 
                                    !(   lineType.trim().equalsIgnoreCase("LINE") || 
                                         lineType.trim().equalsIgnoreCase("FREIGHT") || 
                                         lineType.trim().equalsIgnoreCase("AOG") 
                                         )) {
                                                System.out.println("Setting LineType with default value as LINE.........");
                                                row.setAttribute("LineType", "LINE");   
                                                }
                                                                           
                                            }
                                            else
                                                row.setAttribute("LineType", "LINE"); 
                         
                         
                       /*Start :4thNov change :Sequencing line NO if line no is coming null from BPM*/  
                         if(lineResetFlag){
                              System.out.println("Line number is null.....setting line number to :: "+lineNo);   
                              row.setAttribute("LineNumber", lineNo);
                         }
                         
                         lineNo++;
                         
                        /*End : 4thNov change :Sequencing line NO if line no is coming null from BPM*/  
                        
                        if(row.getAttribute("TaxAmountLineitem")!=null) {
                            String attr1 = (String)row.getAttribute("TaxAmountLineitem");
                            if(attr1!=null && attr1.trim().equalsIgnoreCase("NaN")) {
                                row.setAttribute("TaxAmountLineitem", null);
                            }
                        }
                        if(row.getAttribute("Attr9")==null){
                            row.setAttribute("Attr9", seqVal);
                        }
                        
                        if(WHTFlagOnPageLoad)
                        { //added on 19th june to prevent WHT code default population on subsequent page loads after first save
                          System.out.println("No need for setting default WHTCODE  >>> adfPage_InternalStatus is :: "+ADFContext.getCurrent().getPageFlowScope().get("adfPage_InternalStatus").toString());  
                        }
                        else if(whtCode != null && pageName.equalsIgnoreCase("APOperation") && !WHTFlagOnPageLoad){
                            
                            System.out.println("Setting WHT CODE to default for 1st time page load ");
                            row.setAttribute("WhtCode", whtCode);  //setting default whtcode for supplier on page load : sourav 9th may,17
                        }
                    }
                }
            }
            //getDBTransaction().commit();        
        } catch (Exception e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null){
                rowSetIterator.closeRowSetIterator();    
            }
        }
        System.out.println("End: modifyLineItemDetails()" + new Date());
    }
    
    /**
     *
     * @param invoiceId
     */
    
   
    public void executeHeaderLineItemDetails(String invoiceId,String pageName){
        
        
        System.out.println("Page Name : "+pageName);
        
        System.out.println("Start: executeHeaderLineItemDetails() : "+new Date());
       
        System.out.println("invoiceId : "+invoiceId);
        
//        String contextStr = ADFWorklistBeanUtil.getWorklistContextId();
//        wfSvcClient = WorkflowService.getWorkflowServiceClient();
//        queryService = wfSvcClient.getTaskQueryService();
//        wfContext = queryService.getWorkflowContext(contextStr);
//        userId = wfContext.getUser();
        
        Object checkingFlag = ADFContext.getCurrent().getPageFlowScope().get("FIRST_TIME_PAGE_ACCESS");
        System.out.println("===== First time page access flag : "+(checkingFlag==null));
        if(checkingFlag!=null) {     
            System.out.println("=== Returning without executing initial logic");
            return;
        }
        String whtCode = null;
        ADFContext.getCurrent().getPageFlowScope().put("FIRST_TIME_PAGE_ACCESS","true");
        //ADFContext.getCurrent().getPageFlowScope().put("PageName", pageName);
        boolean whtReqd = false;
        boolean WHTFlagOnPageLoad = false;
        RowSetIterator rowSetIterator = null;
        try{
            if(invoiceId != null) {
            
                oracle.jbo.domain.Number SupplierSiteNumber = null;
                String currencyCode = null;
                oracle.jbo.domain.Date invoiceDate = null;
                String orgID = null;
                //For Header Details 
                ViewObjectImpl vo = getHeaderDetailsEOView1();
                ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
                vo.applyViewCriteria(vc);
                vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
                vo.executeQuery();
                System.out.println("Count Header Rows: "+vo.getEstimatedRowCount());
                
                
               
                if(vo.getEstimatedRowCount()>0){
                    
                        String supplierName = null;
                        String certifierName = null;
                        String employeeNumber = null;
                        String emailId = null;
                        oracle.jbo.domain.Number supplierNumber = null;
                        
                        
                        oracle.jbo.domain.Number SiteId = null;
                        String SiteName=null;
                        String OperatingUnit=null;
                        String invScanDate=null;
                        
                        String invoiceType = null;
                        String documentType = null;
                        String docId = null;
                        rowSetIterator = vo.createRowSetIterator(null);
                        Row headerRow = null;
                        while(rowSetIterator.hasNext()) {
                            System.out.println("-------------Inside HasNext()------------");
                            headerRow = rowSetIterator.next();
                            if (null != headerRow) {
                                
                                System.out.println("***** headerRow.getAttribute(\"SupplierName\") ***** "+headerRow.getAttribute("SupplierName"));
                                System.out.println("***** headerRow.getAttribute(\"CertifierName\") ***** "+headerRow.getAttribute("CertifierName"));
                                System.out.println("***** headerRow.getAttribute(\"EmployeeNumber\") ***** "+headerRow.getAttribute("EmployeeNumber"));
                                System.out.println("***** headerRow.getAttribute(\"CertifierEmailAdd\") ***** "+headerRow.getAttribute("CertifierEmailAdd"));
                                System.out.println("***** headerRow.getAttribute(\"SiteId\") ***** "+headerRow.getAttribute("SiteId"));
                                System.out.println("***** headerRow.getAttribute(\"SiteName\") ***** "+headerRow.getAttribute("SiteName"));
                                System.out.println("***** headerRow.getAttribute(\"HeaderAttr2\") ***** "+headerRow.getAttribute("HeaderAttr2"));
                                System.out.println("***** headerRow.getAttribute(\"InvoiceType\") ***** "+headerRow.getAttribute("InvoiceType"));
                                System.out.println("***** headerRow.getAttribute(\"DocumentType\") ***** "+headerRow.getAttribute("DocumentType"));
                                 
                                System.out.println("***** headerRow.getAttribute(\"OrgId\") ***** "+headerRow.getAttribute("OrgId"));
                                ADFContext.getCurrent().getPageFlowScope().put("OrgID", headerRow.getAttribute("OrgId"));
                                
                                invScanDate=headerRow.getAttribute("HeaderAttr6")==null ? null : (String)headerRow.getAttribute("HeaderAttr6");
                                ADFContext.getCurrent().getPageFlowScope().put("invoiceScanDate",invScanDate );
                                System.out.println("******** headerRow.getAttribute(\"invoiceScanDate\"): "+ headerRow.getAttribute("HeaderAttr6"));
                                
                                System.out.println("********  headerRow.getAttribute(\"InvalidCode\"): "+  headerRow.getAttribute("InvalidCode"));
                                System.out.println("********  headerRow.getAttribute(\"InvalidReasonTypeId\"): "+  headerRow.getAttribute("InvalidReasonTypeId"));
                                ADFContext.getCurrent().getPageFlowScope().put("newReasonID", headerRow.getAttribute("InvalidCode")); 
                                ADFContext.getCurrent().getPageFlowScope().put("newReasonTypeID", headerRow.getAttribute("InvalidReasonTypeId")); 
                                supplierName = headerRow.getAttribute("SupplierName")==null ? null : (String)headerRow.getAttribute("SupplierName");
                                
                                supplierNumber = headerRow.getAttribute("SupplierNumber")==null ? null : (oracle.jbo.domain.Number)headerRow.getAttribute("SupplierNumber");
                                certifierName = headerRow.getAttribute("CertifierName")==null ? null : (String)headerRow.getAttribute("CertifierName");                               
                                employeeNumber = headerRow.getAttribute("EmployeeNumber")==null ? null : (String)headerRow.getAttribute("EmployeeNumber");
                                ADFContext.getCurrent().getPageFlowScope().put("employeeNumber", headerRow.getAttribute("EmployeeNumber"));
                                
                                
                                orgID = headerRow.getAttribute("OrgId")==null ? null : (String)headerRow.getAttribute("OrgId");
                                emailId = headerRow.getAttribute("CertifierEmailAdd")==null ? null : (String)headerRow.getAttribute("CertifierEmailAdd");
                                SiteId = headerRow.getAttribute("SiteId")==null ? null : (oracle.jbo.domain.Number)headerRow.getAttribute("SiteId");
                                SupplierSiteNumber = SiteId;
                                currencyCode = headerRow.getAttribute("CurrencyCode")==null ? null : (String)headerRow.getAttribute("CurrencyCode");
                                invoiceDate = headerRow.getAttribute("InvoiceDate")==null ? null : (oracle.jbo.domain.Date)headerRow.getAttribute("InvoiceDate");
                                System.out.println("invoiceDate in IMPL :"+invoiceDate);
                                SiteName = headerRow.getAttribute("SiteName")==null ? null : (String)headerRow.getAttribute("SiteName");
                                OperatingUnit = headerRow.getAttribute("HeaderAttr2")==null ? null : (String)headerRow.getAttribute("HeaderAttr2");
                                /* docId = headerRow.getAttribute("Docid")==null ? null : (String)headerRow.getAttribute("Docid");
                                ADFContext.getCurrent().getPageFlowScope().put("Docid_value", docId); */
                                invoiceType = headerRow.getAttribute("InvoiceType")==null ? null : (String)headerRow.getAttribute("InvoiceType"); 
                                documentType = headerRow.getAttribute("DocumentType")==null ? null : (String)headerRow.getAttribute("DocumentType");
                                ADFContext.getCurrent().getPageFlowScope().put("internalStatus", headerRow.getAttribute("InternalStatus")); 
                               
                                ADFContext.getCurrent().getPageFlowScope().put("adfPage_InternalStatus" ,headerRow.getAttribute("HeaderAttr9")); //added on2nd May A.D
                                    
                                ADFContext.getCurrent().getPageFlowScope().put("InvalidReason",headerRow.getAttribute("InvalidReason"));
                                
                                /**Requirement Comma Seperated LineAmount and CurrencyAmount to be displayed on certifier page */
                                
                                /*21st Sept 2017*/
                                System.out.println("HeaderAttr1 from apAMIMPL::"+headerRow.getAttribute("HeaderAttr1"));
                                if(headerRow.getAttribute("HeaderAttr1")!=null &&  headerRow.getAttribute("HeaderAttr1").toString().contains(",")){
                                  
                                  ADFContext.getCurrent().getPageFlowScope().put("lineTotalToBeSaved",headerRow.getAttribute("HeaderAttr1").toString().replaceAll(",", ""));  
                                }
                                
                                else{
                                ADFContext.getCurrent().getPageFlowScope().put("lineTotalToBeSaved",headerRow.getAttribute("HeaderAttr1"));
                                } 
                                if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                                    
                                    System.out.println("lineTotalToBeSaved from apAMIMPL::"+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString()); 
                                }

                               /* ADFContext.getCurrent().getPageFlowScope().put("CertifierLineTotal",headerRow.getAttribute("HeaderAttr1"));
                                ADFContext.getCurrent().getPageFlowScope().put("CertifierCurrencyEquivalent",headerRow.getAttribute("CurrencyEquivalent"));*/
                                /**Ends */
                              
                                
                                
                                
                                
                                /* added by sourav on 19th june */
                                
                                System.out.println("Header attr 8 :"+headerRow.getAttribute("HeaderAttr8"));
                                WHTFlagOnPageLoad = headerRow.getAttribute("HeaderAttr8") != null ? true : false;
                                if(WHTFlagOnPageLoad)
                                    ADFContext.getCurrent().getPageFlowScope().put("WHTFlagOnPageLoad","true");
                                else
                                    ADFContext.getCurrent().getPageFlowScope().put("WHTFlagOnPageLoad","false");
                                System.out.println("WHTFlagOnPageLoad value :"+WHTFlagOnPageLoad);
                                
                                
                                
                                
                            }
                        }
                        
                        //Audit table related
                        try {                            
                            headerRow.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                            System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                            headerRow.setAttribute("ModifiedBy", "ADF"); 
                            System.out.println("ModifiedBy ADF");
                            headerRow.setAttribute("HeaderAttr9", "From_ADF_pageload");
                            System.out.println("HeaderAttr9 is From_ADF_pageload");                          
                            //getDBTransaction().commit();                            
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        
                        try {
                            
                            invoiceType = invoiceType==null?"":invoiceType.trim();
                            System.out.println("Invoice Type before Modification :::"+invoiceType);
                            if(invoiceType.equalsIgnoreCase("PO")) {
                                invoiceType = "PO Invoice";  
                            } else if(invoiceType.equalsIgnoreCase("NO-PO")) {
                                invoiceType = "Non PO Invoice";
                            }
                            
                            System.out.println("Invoice Type after Modification :::"+invoiceType);
                            
                            if ( headerRow!=null ) {
                                headerRow.setAttribute("InvoiceType", invoiceType);
                                //getDBTransaction().commit();
                            }
                            
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        try {
                            
                            
                            documentType = documentType==null?"":documentType.trim();
                            if(documentType.equalsIgnoreCase("INVOICE")) {
                                documentType = "Invoice";  
                            } else if(documentType.equalsIgnoreCase("CREDIT")) {
                                documentType = "Credit Note";
                            }
                            
                            if ( headerRow!=null ) {
                                headerRow.setAttribute("DocumentType", documentType);
                                //getDBTransaction().commit();
                                // commnets field set to empty
                                headerRow.setAttribute("ApOperationComments", "");
                            }
                            
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        }
                        
                        
                        //Populate Employee Number and email id if Certifier Name is present
                        ApplicationModule am1 = null;
                        RowSetIterator rowsetIt1 = null;
                        try{
                            if(certifierName!=null && (employeeNumber==null || emailId==null)){
                                System.out.println("----- Inside Auto-population logic : Certifier name");
                                String amDef = "model.EbsAM";
                                String config = "EbsAMLocal";
                                am1 = Configuration.createRootApplicationModule(amDef, config);
                                EbsAMImpl amImpl = (EbsAMImpl)am1;  
                                
                                ViewObjectImpl certifierNameVO = amImpl.getCertifierNameVO1();
                                ViewCriteria certifierVc = certifierNameVO.getViewCriteria("CertifierNameVOCriteria");
                                certifierNameVO.applyViewCriteria(certifierVc);
                                certifierNameVO.setNamedWhereClauseParam("bindName", certifierName); 
                                certifierNameVO.executeQuery();
                                
                                if(certifierNameVO.getEstimatedRowCount() ==1){
                                  System.out.println("Row count is :: "+ certifierNameVO.getEstimatedRowCount());
                                  rowsetIt1 = certifierNameVO.createRowSetIterator(null);
                                    while(rowsetIt1.hasNext()) {
                                        Row row = rowsetIt1.next();
                                        try {
                                            System.out.println("--- Matched employee number : "+row.getAttribute("EmployeeNumber"));
                                            employeeNumber = row.getAttribute("EmployeeNumber")==null ? null : (String)row.getAttribute("EmployeeNumber");
                                            System.out.println("--- Matched email id : "+row.getAttribute("EmailAddress"));
                                            emailId = row.getAttribute("EmailAddress")==null ? null : (String)row.getAttribute("EmailAddress");
                                            
                                            String actualCertNameinDB = row.getAttribute("Conname")==null ? null : (String)row.getAttribute("Conname");
                                            if ( headerRow!=null ) {
                                                headerRow.setAttribute("CertifierName", actualCertNameinDB);
                                                headerRow.setAttribute("EmployeeNumber", employeeNumber);                                                
                                                headerRow.setAttribute("CertifierEmailAdd", emailId);
                                                //getDBTransaction().commit();
                                            }
                                        } catch(Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                            }
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        } finally {
                            if(am1!=null) {
                                try {
                                    Configuration.releaseRootApplicationModule(am1, true);
                                } catch(Exception ex2) {
                                    ex2.printStackTrace();
                                }
                            }
                            if(rowsetIt1!=null) {
                                try {
                                    rowsetIt1.closeRowSetIterator();
                                } catch(Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                        //Populate Supplier Number if Supplier Name is present : Added KD : 23/04/2016
                        //populate wht checkbox based on supplier name
                        ApplicationModule am2 = null;
                        RowSetIterator rowsetIt2 = null;
                        try {                            
                            if(supplierName!=null && (supplierNumber==null || supplierNumber != null)) { //condition changed.execute vo to find wht flag;
                                System.out.println("----- Inside Auto-population logic : Supplier Number");
                                System.out.println("--- Auto populating Supplier Number field against Supplier Name : "+supplierName);    
                                
                                
                                String amDef = "model.EbsAM";
                                String config = "EbsAMLocal";
                                am2 = Configuration.createRootApplicationModule(amDef, config);
                                EbsAMImpl amImpl = (EbsAMImpl)am2;        
                              
                                
                                ViewObjectImpl suppNameVO = amImpl.getSitesVO1();
                               

                                ViewCriteria viewCrit = suppNameVO.getViewCriteria("SitesVOCriteria_filterByVendorname_matchExact");
                                suppNameVO.applyViewCriteria(viewCrit);
                                suppNameVO.setNamedWhereClauseParam("bindVendorName", supplierName); 
                                suppNameVO.executeQuery();
                                
                                
                                if(suppNameVO.getEstimatedRowCount()>0) {
                                    System.out.println("--- Match found for Suppier Name : "+suppNameVO.getEstimatedRowCount()+" records.");
                                    rowsetIt2 = suppNameVO.createRowSetIterator(null);
                                    
                                    while(rowsetIt2.hasNext()) {
                                        Row row = rowsetIt2.next();
                                        try {
                                            System.out.println("--- Matched Supplier Number : "+row.getAttribute("VendorNumber"));
                                            supplierNumber = row.getAttribute("VendorNumber")==null ? null : new oracle.jbo.domain.Number( (String)row.getAttribute("VendorNumber") );
                                            oracle.jbo.domain.Number  vendorSiteId = row.getAttribute("VendorSiteId") == null ? null : (oracle.jbo.domain.Number)row.getAttribute("VendorSiteId");
                                          
                                            
                                            
                                            if ( headerRow!=null ) {
                                                headerRow.setAttribute("SupplierNumber", supplierNumber);
                                                    System.out.println("--- Matched Supplier ID :"+row.getAttribute("VendorId")!=null ? row.getAttribute("VendorId").toString() :"Supplier ID is empty");  //changed on 6th June 
                                                headerRow.setAttribute("SupplierId", row.getAttribute("VendorId")!=null ? row.getAttribute("VendorId").toString() :null ); // VendorId
                                                
                                               /* if(whtReqd){
                                                    
                                                    ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","yes");
                                                    ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","true");
                                                    ADFContext.getCurrent().getPageFlowScope().put("defaultWHTCode",whtCode);
                                                    if(pageName.equalsIgnoreCase("APOperation"))
                                                        headerRow.setAttribute("WhtRequired", "true");
                                                }else{
                                                    ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","no");
                                                    ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","false");
                                                    if(pageName.equalsIgnoreCase("APOperation"))
                                                        headerRow.setAttribute("WhtRequired", "false");
                                                    }*/
                                                }
                                                //getDBTransaction().commit();
                                                /*
                                                String supplierId = "" + vendorSiteId.intValue();
                                                System.out.println("***** Setting Supplier ID in initial data load logic ***** : "+supplierId);
                                                ADFContext.getCurrent().getPageFlowScope().put("supplier_id_value", supplierId);*/
                                            
                                        } catch(Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                
                                
                                
                            }
                            
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        } finally {
                            if(am2!=null) {
                                try {
                                    Configuration.releaseRootApplicationModule(am2, true);
                                } catch(Exception ex2) {
                                    ex2.printStackTrace();
                                }
                            }
                            if(rowsetIt2!=null) {
                                try {
                                    rowsetIt2.closeRowSetIterator();
                                } catch(Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                        
                    if ( headerRow!=null ) {        
                         oracle.jbo.domain.Number supplierId = headerRow.getAttribute("SupplierId")==null ? null : (oracle.jbo.domain.Number)headerRow.getAttribute("SupplierId");
                         String suppId = supplierId == null? null : (""+supplierId.intValue());
                         System.out.println("***** Setting Supplier ID in initial data load logic ***** : "+suppId);
                         ADFContext.getCurrent().getPageFlowScope().put("supplier_id_value", suppId);
                    }
                    
                    
                    //Populate WHT Code on supplier and site combination // 7th june,2017
                    
                    ApplicationModule am4 = null;
                    RowSetIterator whtrowsetIt = null;
                    
                    try{
                        
                        System.out.println("populate wht code by supplier and site combination");
                        
                        String amDef = "model.EbsAM";
                        String config = "EbsAMLocal";
                        am4 = Configuration.createRootApplicationModule(amDef, config);
                        EbsAMImpl amImpl = (EbsAMImpl)am4;        
                        
                        
                        ViewObjectImpl sitesDetailsVO = amImpl.getSitesDetailsVO1();
                     
                        if(!(SiteId == null && supplierName == null)){
                            
                            ViewCriteria viewCrit = sitesDetailsVO.getViewCriteria("SitesDetailsVOCriteria_bySiteId");
                            sitesDetailsVO.applyViewCriteria(viewCrit);
                            sitesDetailsVO.setNamedWhereClauseParam("bindSiteId", SiteId); 
                            sitesDetailsVO.setNamedWhereClauseParam("bindSupplierName", supplierName);
                            sitesDetailsVO.executeQuery();
                            
                            if(sitesDetailsVO.getEstimatedRowCount()>0) {
                                System.out.println("--- Match found for Site ID : "+sitesDetailsVO.getEstimatedRowCount()+" records.");
                                whtrowsetIt = sitesDetailsVO.createRowSetIterator(null);
                                while(whtrowsetIt.hasNext()) {
                                    Row row = whtrowsetIt.next();
                                    try {
                                            
                                        if(row.getAttribute("WhtFlag") != null && row.getAttribute("WhtFlag").toString().equals("Y")){
                                            
                                            whtReqd = true;
                                            whtCode = row.getAttribute("WhtCode") != null ? row.getAttribute("WhtCode").toString() : null;    // default wht code for supplier
                                        }
                                        
                                        else
                                            whtReqd = false;
                                        
                                    }catch(Exception e){
                                        e.printStackTrace();
                                    }
                            
                                }
                            
                            }
                            
                        }  
                        
                    }catch(Exception e){
                        e.printStackTrace();
                        }finally{
                        
                            if(am4!=null) {
                                try {
                                    Configuration.releaseRootApplicationModule(am4, true);
                                } catch(Exception ex2) {
                                    ex2.printStackTrace();
                                }
                            }
                            if(whtrowsetIt!=null) {
                                try {
                                    whtrowsetIt.closeRowSetIterator();
                                } catch(Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                            
                        }
                    
                    
                        //setting wht code default variables
                        
                    
//                        boolean whtConditionFlag = !(ADFContext.getCurrent().getPageFlowScope().get("adfPage_InternalStatus")!=null &&  (ADFContext.getCurrent().getPageFlowScope().get("adfPage_InternalStatus").toString().equals("From_ADF_APOps_Submit")
//                        ||ADFContext.getCurrent().getPageFlowScope().get("adfPage_InternalStatus").toString().equalsIgnoreCase("From_ADF_APOps_Save")))
//                        &&(ADFContext.getCurrent().getPageFlowScope().get("InvalidReason")==null || (ADFContext.getCurrent().getPageFlowScope().get("InvalidReason") != null && !ADFContext.getCurrent().getPageFlowScope().get("InvalidReason").toString().equalsIgnoreCase("CERTIFIER REJECTION"))
//                            );  //modified on 16th JUNE
                        
                        
                        //System.out.println("wht required flag :"+whtConditionFlag);
                        
                        if(whtReqd){
                            
                            System.out.println("default wht code required val for supplier : "+whtReqd);
                            
                            ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","yes");
                            ADFContext.getCurrent().getPageFlowScope().put("defaultWHTCode",whtCode);
                            //ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","true");dsadasd
                            if(pageName.equalsIgnoreCase("APOperation") && !WHTFlagOnPageLoad) // setting check box value only if page if first time loaded before save or submit //Sourav
                            {
                                System.out.println("setting wht flag on page load");
                                ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","true");
                                headerRow.setAttribute("WhtRequired", "true");
                            }
                        }else{
                                ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","no");
                                ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","false");
                            if(pageName.equalsIgnoreCase("APOperation") && !WHTFlagOnPageLoad) // setting check box value only if page if first time loaded before save or submit //Sourav
                            { 
                                    System.out.println("setting wht flag on page load");
                                    headerRow.setAttribute("WhtRequired", "false");
                            }
                        }
                    
                    
//                        
                        //Populate Site Name & Operating Unit if Site ID is present : Added KD : 23/04/2016
                        ApplicationModule am3 = null;
                        RowSetIterator rowsetIt3 = null;
                        try {                            
                            if(SiteId!=null && ((SiteName==null||OperatingUnit==null) || (supplierName==null))) {
                                System.out.println("----- Inside Auto-population logic : Site Name & Operating");
                                System.out.println("--- Auto populating Supplier Number field against Site ID : "+SiteId);    
                                
                                
                                String amDef = "model.EbsAM";
                                String config = "EbsAMLocal";
                                am3 = Configuration.createRootApplicationModule(amDef, config);
                                EbsAMImpl amImpl = (EbsAMImpl)am3;        
                              
                                
                                ViewObjectImpl sitesDetailsVO = amImpl.getSitesDetailsVO1();
                               
                                
                                
                                ViewCriteria viewCrit = sitesDetailsVO.getViewCriteria("SitesDetailsVOCriteria1");
                                sitesDetailsVO.applyViewCriteria(viewCrit);
                                sitesDetailsVO.setNamedWhereClauseParam("bindSiteId", SiteId); 
                                sitesDetailsVO.executeQuery();
                                
                                
                                if(sitesDetailsVO.getEstimatedRowCount()>0) {
                                    System.out.println("--- Match found for Site ID : "+sitesDetailsVO.getEstimatedRowCount()+" records.");
                                    rowsetIt3 = sitesDetailsVO.createRowSetIterator(null);
                                    while(rowsetIt3.hasNext()) {
                                        Row row = rowsetIt3.next();
                                        try {
                                            System.out.println("--- Matched Supplier Number : "+row.getAttribute("VendorSiteCode")+", "+row.getAttribute("OperatingUnit"));
                                            SiteName = row.getAttribute("VendorSiteCode")==null ? null : ( (String)row.getAttribute("VendorSiteCode") );
                                            OperatingUnit = row.getAttribute("OperatingUnit")==null ? null : ( (String)row.getAttribute("OperatingUnit") );
                                            
                                           
                                            
                                         /*   if(row.getAttribute("WhtFlag") != null && row.getAttribute("WhtFlag").toString().equals("Y")){
                                                
                                                whtReqd = true;
                                                whtCode = row.getAttribute("WhtCode") != null ? row.getAttribute("WhtCode").toString() : null;    // default wht code for supplier
                                            }
                                            
                                            else
                                                whtReqd = false;
                                            System.out.println("wht flag for site" + SiteId+"is" + row.getAttribute("WhtFlag"));
                                            System.out.println("wht code fo site "+ SiteId + "is" + whtCode);
                                            System.out.println("whtreqd val :"+whtReqd);*/
                                            if ( headerRow!=null ) {
                                                headerRow.setAttribute("SiteName", SiteName);                                                
                                                headerRow.setAttribute("HeaderAttr2", OperatingUnit);
                                                
                                              /*  if(whtReqd){
                                                    
                                                    ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","yes");
                                                    ADFContext.getCurrent().getPageFlowScope().put("defaultWHTCode",whtCode);
                                                    ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","true");
                                                    if(pageName.equalsIgnoreCase("APOperation"))
                                                        headerRow.setAttribute("WhtRequired", "true");
                                                }else{
                                                        ADFContext.getCurrent().getPageFlowScope().put("whtRequiredFlag","no");
                                                        ADFContext.getCurrent().getPageFlowScope().put("WHTReqdFlag","false");
                                                        if(pageName.equalsIgnoreCase("APOperation"))
                                                            headerRow.setAttribute("WhtRequired", "false");
                                                }*/
                                            }   
                                        } catch(Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }
                                
                                
                                
                            }
                            
                        } catch(Exception ex) {
                            ex.printStackTrace();
                        } finally {
                            if(am3!=null) {
                                try {
                                    Configuration.releaseRootApplicationModule(am3, true);
                                } catch(Exception ex2) {
                                    ex2.printStackTrace();
                                }
                            }
                            if(rowsetIt3!=null) {
                                try {
                                    rowsetIt3.closeRowSetIterator();
                                } catch(Exception ex) {
                                    ex.printStackTrace();
                                }
                            }
                        }
                        
                    
                }
                //for Comments Table  
                ViewObjectImpl vo3 = getApCommentsTableVO1();                
                vo3.setNamedWhereClauseParam("bindInvoiceID", invoiceId);
                vo3.executeQuery();                 
                System.out.println("Count ApCommentsTable Rows: "+vo.getEstimatedRowCount());            
               
        
                //For Line Details 
                ViewObjectImpl vo2 = getLineItemDetailsEOView1();
                ViewCriteria vc2 = vo2.getViewCriteria("LineItemDetailsEOViewCriteria");
                vo2.applyViewCriteria(vc2);
                vo2.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
                vo2.executeQuery();
                
                
                System.out.println("-------------Line Item Rows for "+invoiceId+": "+vo2.getEstimatedRowCount());
                
                modifyLineItemDetails(invoiceId,whtCode,pageName,WHTFlagOnPageLoad);
                
                if(ADFContext.getCurrent().getPageFlowScope().get("whtRequiredFlag") != null && ADFContext.getCurrent().getPageFlowScope().get("whtRequiredFlag").toString().equals("yes")){
                    
                    String SiteNo = SupplierSiteNumber != null ? SupplierSiteNumber.toString() : null;
                    String invDate = invoiceDate != null ? invoiceDate.toString() : null;
                    String currency = currencyCode != null ? currencyCode : null;
                    
                    System.out.println("Calling WHTAmount Function on Page Load in APOperationIMPL");
                    
                    if(SiteNo!=null && invDate!=null && currency!=null && orgID!=null && !WHTFlagOnPageLoad){
                        
                            //call whtAmount WS iff all input parameters are non -empty and flag is false
                            calculateWHTAmount(SiteNo,invDate,currency,orgID);
                        
                        }
                    
                    }
               
                // Populate Line Total Sum On page load
                
             /*   String line_total_sum = null;
                ResultSet rs = getDBTransaction().createStatement(0).executeQuery("select sum(line_total_amount) from ap_lineitem_table where invoice_id = "+invoiceId);
                if (rs.next()) {
                                line_total_sum = String.valueOf(rs.getDouble(1));
                            }
                             
                ADFContext.getCurrent().getPageFlowScope().put("line_total_sum",line_total_sum);
                            
                            System.out.println("--------------Sum Of Line_Total Initially for "+invoiceId+"---------"+line_total_sum);
                            rs.close();*/
                            
                // Populate Tax Amount Sum On page Load
                
                /*String tax_amount_total = null;
                ResultSet taxAmountTotalRS = getDBTransaction().createStatement(0).executeQuery("select sum(attr1) from ap_lineitem_table where invoice_id = "+invoiceId);
                if (taxAmountTotalRS.next()) {
                                tax_amount_total = String.valueOf(taxAmountTotalRS.getDouble(1));
                            }
                             
                ADFContext.getCurrent().getPageFlowScope().put("tax_amount_total",tax_amount_total);
                            
                            System.out.println("--------------Sum Of tax_amount_total Initially "+invoiceId+"---------"+tax_amount_total);
                            taxAmountTotalRS.close();*/
                
                
                
                
                
            } else {
                
                System.out.println("INVOICE ID is NULL : " +new java.util.Date());
            }
        }
        catch(Exception e) 
        {
            e.printStackTrace();
        }
        finally {
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                }
            }
        }
        System.out.println("End: executeHeaderLineItemDetails()");
    
    }
    
    /**
     *
     * @param invoiceId
     * @return
     */
    public Map<String, String> executeHeaderLineItemDetailsWithReturn(String invoiceId,String supplierName,String siteId)
    {
        System.out.println("Start: executeHeaderLineItemDetails()");
        Map<String, String> headerMap =  new HashMap<String, String>();
        RowSetIterator rowSetIterator = null;
      //  RowSetIterator rowSetIterator1 = null;
     //   RowSetIterator rowSetIterator2 = null;
        String reason = null;
        String reasonType = null;
        String invType = null;
        String docType = null;
        String exceptionMsg = null;
        String suppNo = null;
        String siteName = null;
        String orgUnit = null;
        //For Header Details 
        try{
        ViewObjectImpl vo = getHeaderDetailsEOView1();
        ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
        vo.executeQuery();
        System.out.println("-------------Header Rows: "+vo.getEstimatedRowCount());
        if(vo.getEstimatedRowCount() > 0){               
            rowSetIterator = vo.createRowSetIterator(null);
            while(rowSetIterator.hasNext()) {
                Row row = rowSetIterator.next();
                if (null != row) {
                    if(row.getAttribute("InvalidReason") != null)
                        reason = row.getAttribute("InvalidReason").toString();{ 
                    ADFContext.getCurrent().getPageFlowScope().put("InvalidReason",row.getAttribute("InvalidReason"));
                    System.out.println("-------------InvalidReason: "+reason);
                        }
                    if(row.getAttribute("InvalidReasonType") != null)
                        reasonType = row.getAttribute("InvalidReasonType").toString(); 
                    System.out.println("-------------InvalidReasonType: "+reasonType);
                    
                    if(row.getAttribute("DocumentType") != null)
                        docType = row.getAttribute("DocumentType").toString(); 
                    System.out.println("-------------docType: "+docType);
                    if(row.getAttribute("InvoiceType") != null)
                        invType = row.getAttribute("InvoiceType").toString(); 
                    System.out.println("-------------invType: "+invType);
                    
                    if(row.getAttribute("HeaderAttr3") != null)
                        exceptionMsg = row.getAttribute("HeaderAttr3").toString(); 
                    System.out.println("-------------exceptionMsg: "+exceptionMsg);
           // commented by sourav and santha         
               /*     if(row.getAttribute("SupplierNumber") != null)
                        suppNo = row.getAttribute("SupplierNumber").toString(); 
                    System.out.println("-------------suppNo: "+suppNo);
                    
                    if(row.getAttribute("SiteName") != null)
                        siteName = row.getAttribute("SiteName").toString(); 
                    System.out.println("-------------siteName: "+siteName);
                    
                    if(row.getAttribute("Attr2") != null)
                        orgUnit = row.getAttribute("Attr2").toString(); 
                    System.out.println("-------------orgUnit: "+orgUnit);*/
                }
            }
        }
        
        /*
        // added by sourav and santha
        ViewObjectImpl vo1 = getSitesVO();
        ViewCriteria vc1 = vo1.getViewCriteria("SitesVOCriteria");
        vo1.applyViewCriteria(vc1);
        vo1.setNamedWhereClauseParam("bindVendorName", supplierName);
        vo1.executeQuery();
        System.out.println("-------------Header Rows: "+vo1.getEstimatedRowCount());
        if(vo1.getEstimatedRowCount() > 0){               
            rowSetIterator1 = vo1.createRowSetIterator(null);
            while(rowSetIterator1.hasNext()) {
                Row row = rowSetIterator1.next();
                if (null != row) {
                                      
                    if(row.getAttribute("VendorNumber") != null)
                        suppNo = row.getAttribute("VendorNumber").toString(); 
                    System.out.println("-------------suppNo: "+suppNo);
                    
                }
            }
        }
        // added by sourav and santha
        ViewObjectImpl vo3 = getSitesDetailsVO();
        ViewCriteria vc3 = vo3.getViewCriteria("SitesDetailsVOCriteria1");
        vo3.applyViewCriteria(vc3);
        vo3.setNamedWhereClauseParam("bindSiteId", siteId);
        vo3.executeQuery();
        System.out.println("-------------Header Rows: "+vo3.getEstimatedRowCount());
        if(vo3.getEstimatedRowCount() > 0){               
            rowSetIterator2 = vo3.createRowSetIterator(null);
            while(rowSetIterator2.hasNext()) {
                Row row = rowSetIterator1.next();
                if (null != row) {
                                      
                    if(row.getAttribute("VendorSiteCode") != null)
                        siteName = row.getAttribute("VendorSiteCode").toString(); 
                    System.out.println("-------------siteName: "+siteName);
                    
                    if(row.getAttribute("OperatingUnit") != null)
                        orgUnit = row.getAttribute("OperatingUnit").toString(); 
                    System.out.println("-------------orgUnit: "+orgUnit);
                    
                }
            }
        }*/
                 
        headerMap.put("reason", reason);
        headerMap.put("reasonType", reasonType);
        headerMap.put("docType", docType);
        headerMap.put("invType", invType);

        headerMap.put("exceptionMsg", exceptionMsg);
        headerMap.put("suppNo", suppNo);
        headerMap.put("siteName", siteName);
        headerMap.put("orgUnit", orgUnit);

        //For Line Details 
        ViewObjectImpl vo2 = getLineItemDetailsEOView1();
        ViewCriteria vc2 = vo2.getViewCriteria("LineItemDetailsEOViewCriteria");
        vo2.applyViewCriteria(vc2);
        vo2.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
        vo2.executeQuery();
        System.out.println("-------------Line Item Rows: "+vo2.getEstimatedRowCount());
        System.out.println("End: executeHeaderLineItemDetails()");
      
        }catch(Exception e){
            e.printStackTrace();
            }
        finally{
                if(rowSetIterator!=null) {
                    try {
                        rowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        return headerMap;
    }
    
    public void saveAPOperationDetails(Boolean flag,String invoiceId, String supName,String siteId,String invNum,String taxRegNum,
                                String poNum,String lineTotal,String certName,String currency,
                                String invDate,String taxTotal,String headerTotal,String certEmail,
                                String rejReason,String comments,String certComments,
                                String reason,String type,String status,
                                String docType,String invoiceType,String operatingUnit,String invalidReasonType,String invalidReason,String employeeNo) {
        System.out.println("Start: saveAPOperationDetails()");
        System.out.println("-------------invoiceId: "+invoiceId);
        System.out.println("-------------supName: "+supName);
        System.out.println("-------------siteId: "+siteId);
        System.out.println("-------------invNum: "+invNum);
        System.out.println("-------------taxRegNum: "+taxRegNum);
        System.out.println("-------------poNum: "+poNum);
        System.out.println("-------------lineTotal: "+lineTotal);
        
        System.out.println("-------------headerTotal: "+headerTotal);
        System.out.println("-------------taxTotal: "+taxTotal);
        
        System.out.println("-------------certName: "+certName);
        System.out.println("-------------currency: "+currency);
        System.out.println("-------------reason: "+reason);
        System.out.println("-------------type: "+type);
        System.out.println("--------------InvalidReasonType; "+invalidReasonType);
        System.out.println("--------------InvalidReason: "+invalidReason);
        System.out.println("--------------Employee No: "+employeeNo);
      //  String invalidReasonType = (String)AdfFacesContext.getCurrentInstance().getPageFlowScope().get("invalidReasonType");
        RowSetIterator rowSetIterator = null;
        RowSetIterator rsi= null;
        RowSetIterator rowIt= null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    System.out.println("-------------Inside HasNext()------------");
                    Row row = rowSetIterator.next();
                    if (null != row) {
                        System.out.println("-------------supName: "+supName);
                        row.setAttribute("SiteId", siteId); 
                        row.setAttribute("SupplierName", supName); 
                        
                        
                        //Populate SupplierId
                        ApplicationModule am = null;
                        try {
                            String amDef = "model.EbsAM";
                            String config = "EbsAMLocal";
                            am = Configuration.createRootApplicationModule(amDef, config);
                            EbsAMImpl amImpl = (EbsAMImpl)am;                            
                            ViewObjectImpl suppNameVO = amImpl.getSitesVO1();
                            ViewCriteria viewCrit = suppNameVO.getViewCriteria("SitesVOCriteriaSupNameSiteID");
                            suppNameVO.applyViewCriteria(viewCrit);
                            suppNameVO.setNamedWhereClauseParam("bindVendorName", supName);
                            suppNameVO.setNamedWhereClauseParam("bvSiteID", siteId);
                            suppNameVO.executeQuery();
                            
                            
                            
                            
                            if(suppNameVO.getEstimatedRowCount()>0) {
                                System.out.println("--- Match found for Supplier Name : "+suppNameVO.getEstimatedRowCount()+" records.");
                                 rowIt = suppNameVO.createRowSetIterator(null);
                                while(rowIt.hasNext()) {
                                    Row rowData = rowIt.next();
                                    try {
                                        System.out.println("--- Matched Supplier Number : "+rowData.getAttribute("VendorNumber"));
                                        BigDecimal  vendorId = rowData.getAttribute("VendorId") == null ? null : (BigDecimal)rowData.getAttribute("VendorId");                                        
                                        BigDecimal  orgId = rowData.getAttribute("OrgId") == null ? null : (BigDecimal)rowData.getAttribute("OrgId");
//                                        System.out.println("vendorId****"+vendorId);
//                                        System.out.println("orgId****"+orgId);
                                        
                                        row.setAttribute("SupplierId",  vendorId == null ? null : vendorId.intValue()+"");     
                                        row.setAttribute("OrgId",       orgId == null ? null : orgId.intValue()+""); 
                                    } catch(Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } catch(Exception ex) {
                        ex.printStackTrace();
                        } finally {
                            if(am!=null) {
                                Configuration.releaseRootApplicationModule(am, false);
                            }
                        }
                        
                        row.setAttribute("InvoiceNumber", invNum); 
                        row.setAttribute("TaxRegNumber", taxRegNum); 
                        row.setAttribute("PoNumber", poNum); 
                        row.setAttribute("HeaderAttr1", lineTotal); 
                        row.setAttribute("CertifierName", certName); 
                        row.setAttribute("CurrencyCode", currency); 
                        row.setAttribute("InvoiceDate", invDate); 
                        row.setAttribute("TaxAmount", taxTotal); 
                        row.setAttribute("InvoiceTotAmount", headerTotal); 
                        row.setAttribute("CertifierEmailAdd", certEmail); 
                        row.setAttribute("EmployeeNumber", employeeNo);
                        System.out.println("updated Employee No"+row.getAttribute("EmployeeNumber"));
                        row.setAttribute("ApOperationComments", comments); 
                        row.setAttribute("CertifierRejReason", rejReason); 
                        row.setAttribute("CertifierRejComments", certComments); 
                        
                        row.setAttribute("InvalidCode", reason); 
                        row.setAttribute("InvalidReasonTypeId", type);
                        /*17th july 2018 chnage*/
                        row.setAttribute("CertifierReassignComments", "");
                        
                        
                        //TO-DO : To be changed the quick-fix
                        
                        /* commented by raha for setting the reason value in db 19*02*2020
                        if(row.getAttribute("InvalidCode")!=null && (!row.getAttribute("InvalidCode").toString().equals("16") && !row.getAttribute("InvalidCode").toString().equals("20"))) {
                            System.out.println("setting InvalidReason and InvalidReasonType as NONE");
                            row.setAttribute("InvalidReason", "NONE"); 
                            row.setAttribute("InvalidReasonType", "NONE");     
                        } else {
                            row.setAttribute("InvalidReason", invalidReason); 
                            System.out.println(" After saving reason"+invalidReason);
                            row.setAttribute("InvalidReasonType", invalidReasonType);     
                            System.out.println(" After saving reasontype"+invalidReasonType); 
                        }*/
               //uncommented by raha for setting the reason value in db 19*02*2020         
                      row.setAttribute("InvalidReason", invalidReason); 
                      System.out.println(" After saving reason"+invalidReason);
                      row.setAttribute("InvalidReasonType", invalidReasonType);     
                      System.out.println(" After saving reasontype"+invalidReasonType);  
//ended by raha 19*02*2020
                        row.setAttribute("Status", status); 
                        row.setAttribute("DocumentType", docType); 
                        row.setAttribute("InvoiceType", invoiceType);                                           
                        row.setAttribute("HeaderAttr2", operatingUnit); 
                        
                       // java.util.Date utilDate = new java.util.Date();
                       // java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                        System.out.println("saveap operation");
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("ModifiedBy ADF");
                        row.setAttribute("HeaderAttr9", flag==true?"From_ADF_APOps_Submit":"From_ADF_APOps_Save");
                        
                        /**Modifiy Header Attr8 on submit/save ****/
                        
                        row.setAttribute("HeaderAttr8", "yes");
                        
                        
                        System.out.println("HeaderAttr9 is from_adf");
                        
                        
                        System.out.println("===== AP OPS Save/Submit Operation ====="+new Date());
                        System.out.println(
                            "flag:"+flag+", "+
                            "invoiceId:"+invoiceId+", "+
                            "supName:"+supName+", "+
                            "siteId:"+siteId+", "+
                            "invNum:"+invNum+", "+
                            "taxRegNum:"+taxRegNum+", "+
                            "poNum:"+poNum+", "+
                            "lineTotal:"+lineTotal+", "+
                            "certName:"+certName+", "+
                            "currency:"+currency+", "+
                            "invDate:"+invDate+", "+
                            "taxTotal:"+taxTotal+", "+
                            "headerTotal:"+headerTotal+", "+
                            "certEmail:"+certEmail+", "+
                            "rejReason:"+rejReason+", "+
                            "comments:"+comments+", "+
                            "certComments:"+certComments+", "+
                            "reason:"+reason+", "+
                            "type:"+type+", "+
                            "status:"+status+", "+
                            "docType:"+docType+", "+
                            "invoiceType:"+invoiceType+", "+
                            "operatingUnit:"+operatingUnit+", "+
                            "invalidReasonType:"+invalidReasonType+", "+
                            "invalidReason:"+invalidReason+" , employee no "+employeeNo
                        );
                    }
                            
                }
            }
            
            
           //Tax rate ---- 
            
           HashMap<String, BigDecimal> taxRatesMasterList = executeTaxRateCodeResultSet();
            
            ViewObjectImpl lineItems = getLineItemDetailsEOView1();
            ViewCriteria lineItemsVc = lineItems.getViewCriteria("LineItemDetailsEOViewCriteria");
            lineItems.applyViewCriteria(lineItemsVc);
            lineItems.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            lineItems.executeQuery();
            System.out.println("-------------Line Item Rows: "+lineItems.getEstimatedRowCount());
            
             rsi = lineItems.createRowSetIterator(null);                  
            while (rsi.hasNext()) {
                Row lineItem = rsi.next();
                String taxRateCode = (lineItem.getAttribute("TaxRateCode")==null) ? null : (String)lineItem.getAttribute("TaxRateCode");
                //oracle.jbo.domain.Number taxRate = (lineItem.getAttribute("TaxRate")==null) ? null : (oracle.jbo.domain.Number)lineItem.getAttribute("TaxRate");
                System.out.println("TaxRateCode in LineItem ::: "+taxRateCode);
                if(taxRateCode!=null) {                    
                    BigDecimal taxRateFromMasterList = taxRatesMasterList.get(taxRateCode);
                    System.out.println("taxRateFromMasterList ::: "+taxRateFromMasterList);
                    if(taxRateFromMasterList!=null) {                        
                        oracle.jbo.domain.Number taxRate = new oracle.jbo.domain.Number(taxRateFromMasterList.doubleValue());
                        System.out.println("Final tax rate ::: "+ taxRate);
                        lineItem.setAttribute("TaxRate", taxRate);
                    }
                    else{
                        lineItem.setAttribute("TaxRateCode", null);
                        lineItem.setAttribute("TaxRate", null);
                    }
                }     
            }
            
            
            getDBTransaction().commit();
            System.out.println("-------------Committed------------");
            
            //executeHeaderLineItemDetails(invoiceId);
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
                if(rowSetIterator!=null) {
                    try {
                        rowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();
                    
                }
                }
            if(rowIt!=null) {
                try {
                    rowIt.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
                
        }
        System.out.println("End: saveAPOperationDetails()");
    }

    public HashMap<String, BigDecimal> executeTaxRateCodeResultSet() {
        HashMap<String, BigDecimal> retmap = new HashMap<String, BigDecimal>();
        ApplicationModule am = null;
        RowSetIterator rsi = null;
        try {
            String amDef = "model.EbsAM";
            String config = "EbsAMLocal";
            am = Configuration.createRootApplicationModule(amDef, config);
            EbsAMImpl amImpl = (EbsAMImpl)am;                            
            ViewObjectImpl taxRateCodeMasterListVO1 = amImpl.getTaxRateCodeMasterListVO1();
            System.out.println("-----executeTaxRateCodeResultSet-----");
            taxRateCodeMasterListVO1.executeQuery();
            
            if(taxRateCodeMasterListVO1.getEstimatedRowCount()>0){                                         
                rsi = taxRateCodeMasterListVO1.createRowSetIterator(null);                  
               while (rsi.hasNext()) {                   
                   Row taxRow = rsi.next();
                   //System.out.println("PercentageRate ::"+taxRow.getAttribute("PercentageRate"));
                   // Add your logic here if condition
                   BigDecimal taxRate = (BigDecimal)taxRow.getAttribute("PercentageRate");
                   String taxRateCode=taxRow.getAttribute("TaxRateCode").toString();
//                   System.out.println("key taxRateCode ::: "+taxRateCode + " value taxRate ::: "+ taxRate);
                   retmap.put(taxRateCode, taxRate);                   
               }
            }
        } catch(Exception ex) {
           ex.printStackTrace();
        } finally {
           if(am!=null) {
               Configuration.releaseRootApplicationModule(am, false);
           }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        return retmap;
    }


    /* public void addLineItemRow(String invoiceId) {
        System.out.println("Start: addLineItemRow() : "+new Date());
        RowSetIterator maxIdVORowSetIterator = null;
        int newLineNumber = 1;
        try{
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            ViewCriteria vc2 = vo.getViewCriteria("LineItemDetailsEOViewCriteria");
            vo.applyViewCriteria(vc2);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();
            System.out.println("** EstimatedRowCount :: "+vo.getEstimatedRowCount());

            ViewObjectImpl maxIdVO = getGetMaxLineNumberVO1();
            maxIdVO.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            maxIdVO.executeQuery();
            System.out.println("maxIdVO.getEstimatedRowCount() : "+maxIdVO.getEstimatedRowCount());
            if(maxIdVO.getEstimatedRowCount() > 0){
                maxIdVORowSetIterator = maxIdVO.createRowSetIterator(null);
                while(maxIdVORowSetIterator.hasNext()) {
                    Row row = maxIdVORowSetIterator.next();
                    if (null != row &&  row.getAttribute(0)!=null) {
                        newLineNumber = Integer.parseInt(row.getAttribute(0).toString());
                        newLineNumber++;
                        System.out.println("-------------newLineNumber: "+newLineNumber);
                    }
                }
            }
            int lastRowIndex = vo.getRangeIndexOf(vo.last());
            System.out.println("invoiceId :: "+ invoiceId);
            System.out.println("newLineNumber :: "+ newLineNumber);
            Row row = vo.createRow();
            row.setAttribute("InvoiceId", invoiceId);
            row.setAttribute("LineNumber", newLineNumber);
            vo.insertRowAtRangeIndex(lastRowIndex+1, row);
            //vo.insertRow(row);
            //vo.setCurrentRow(row);
            //getDBTransaction().commit();
            System.out.println("** Aftr commit ***");
        }catch (JboSQLException e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        }
        finally{
                if(maxIdVORowSetIterator!=null) {
                    try {
                        maxIdVORowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();

                }
                }
            }
        System.out.println("End: addLineItemRow()");
    } */
    
    public void addCommentsTableRow(String invoiceID,String commentsDate,String category,String description,String name){
        System.out.println("start : addCommentsTableRow");
        try{
            
            ViewObjectImpl vo = getApCommentsTableVO1();
            int lastRowIndex = vo.getRangeIndexOf(vo.last()); 
            System.out.println("last row index :: "+ lastRowIndex);
            //vo.clearCache();
            Row row = vo.createRow();
            
            //row.setNewRowState(Row.STATUS_INITIALIZED);
            row.setAttribute("InvoiceId", invoiceID);  
            row.setAttribute("Category", category);
            row.setAttribute("Description", description);
            row.setAttribute("Name", name);
            row.setAttribute("CommentsDate", oracle.jbo.domain.Date.getCurrentDate());
            vo.insertRowAtRangeIndex(lastRowIndex+1, row);
            
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
        
        System.out.println("end : addCommentsTableRow");
    }
    
    public void addLineItemRow(String invoiceId) {
    System.out.println("Start: addLineItemRow()");
    RowSetIterator maxIdVORowSetIterator = null;
    int newLineNumber = 1;
    try{       
        
        
//        ystem.out.println("defaultWHTCode in addLineItemRow"+ADFContext.getCurrent().getPageFlowScope().get("defaultWHTCode"));
//        System.out.println("WHTReqdFlag in addLineItemRow"+ADFContext.getCurrent().getPageFlowScope().get("WHTReqdFlag").);
        ViewObjectImpl vo = getLineItemDetailsEOView1();
        /*  ************************************ */
        Row selectedRow=vo.last();
        System.out.println("selectedRow :: "+selectedRow);
           if (selectedRow!=null){
               System.out.println("LineNumber :"+selectedRow.getAttribute("LineNumber"));                  
               if (selectedRow.getAttribute("LineNumber")!=null){
                   newLineNumber = Integer.parseInt(selectedRow.getAttribute("LineNumber").toString());
                   newLineNumber++;            
               }
            }
        
        /* ************************************** */
        
        int lastRowIndex = vo.getRangeIndexOf(vo.last()); 
        System.out.println("last row index :: "+ lastRowIndex);
//        Random randomGenerator = new Random();
//        int randomInt = randomGenerator.nextInt(1000);
//        System.out.println("randomInt>>"+ randomInt);
        Row row = vo.createRow();
        
        //row.setNewRowState(Row.STATUS_INITIALIZED);
        row.setAttribute("isSelected", "N");
        row.setAttribute("InvoiceId", invoiceId);  
        row.setAttribute("LineNumber", newLineNumber);
        row.setAttribute("LinePoNum", ADFContext.getCurrent().getPageFlowScope().get("header_selectedPONumber")!=null ? ADFContext.getCurrent().getPageFlowScope().get("header_selectedPONumber")
                         .toString() : null); //added for  18th august 2018 change
        //row.setAttribute("LinePoNum", "");
        row.setAttribute("PoLineNum", null);
        row.setAttribute("LineDescription", null);
        row.setAttribute("Quantity", null);
        row.setAttribute("Uom", null);
        row.setAttribute("UnitPrice", null);
        row.setAttribute("LineTotalAmount", null);
        row.setAttribute("TaxRate", null);
        row.setAttribute("TaxRateCode", null);
        row.setAttribute("TaxAmountLineitem", null);
        row.setAttribute("LineType","LINE");
        row.setAttribute("WhtCode", ADFContext.getCurrent().getPageFlowScope().get("defaultWHTCode")!=null && (ADFContext.getCurrent().getPageFlowScope().get("WHTReqdFlag")!=null && ADFContext.getCurrent().getPageFlowScope().get("WHTReqdFlag").toString().equalsIgnoreCase("true"))? ADFContext.getCurrent().getPageFlowScope().get("defaultWHTCode").toString() : null);
//        row.setAttribute("Attr10", null);
       
        //row.setNewRowState(Row.STATUS_NEW);
//        vo.clearCache();
        vo.insertRowAtRangeIndex(lastRowIndex+1, row);
        
        System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
    //            getDBTransaction().commit();
    } catch (JboSQLException e) {
    //            getDBTransaction().rollback();
        e.printStackTrace();
    } catch (Exception e) {
    //            getDBTransaction().rollback();
        e.printStackTrace();
    }
    System.out.println("End: addLineItemRow()");
    }
    /* ******************** 
    public void removeLineItemRow(String invoiceId) {
           try {
                   System.out.println("Start: removeLineItemRow()");
                   ViewObjectImpl vo = getLineItemDetailsEOView1();
                   System.out.println("RC before remove After execution getLineItemDetailsEOView1::" +  vo.getEstimatedRowCount());
                   if (vo.getEstimatedRowCount() > 0) {
                       System.out.println("Within vo.getEstimatedRowCount()" + vo.getEstimatedRowCount());                 
                       int numRows = vo.getRowSet().getRowCount();   
                      System.out.println("RC Before remove::"+numRows);  
                               for(int i = 0 ; i < numRows ; i++){
                                   Row selectedRow = vo.getRowSet().next();
                                   if(selectedRow!=null){
                                   int lineNumber = Integer.parseInt(selectedRow.getAttribute("LineNumber").toString().trim());
                                   String isSelected = (String)selectedRow.getAttribute("isSelected");                               
                                   System.out.println("lineNumber =" + lineNumber);
                                   System.out.println("isSelected =" + isSelected);
                                   if (selectedRow.getAttribute("InvoiceId").toString().equals(invoiceId)) {
                                       if (null !=selectedRow.getAttribute("isSelected") && selectedRow.getAttribute("isSelected").equals("Y")) // && ("Y".equalsIgnoreCase((String)row.getAttribute("SelectTr")) ))
                                       {
                                           vo.setCurrentRow(selectedRow);
                                           vo.removeCurrentRow();
                                       }
                                   }
                                   }
                               }
                               
                               numRows = vo.getRowSet().getRowCount();
                       System.out.println("RC After remove::"+numRows);  
                   }
                     
               System.out.println("B4 Commit");
               getDBTransaction().commit();
               System.out.println("After Commit");        
               vo.executeQuery();
               //vo.clearCache();
               System.out.println("RC After executing vo::"+vo.getEstimatedRowCount());
               } catch (Exception e) {
                   // TODO: Add catch code
                   e.printStackTrace();
               }
           //    getDeletedEmpCount().setValue("Records  Deleted: "+recDeleted);
           //    OperationBinding comt = (OperationBinding)bindings.getOperationBinding("Commit");
           //    comt.execute();
           }
    ******************************************************** */ 
    public void removeLineItemRow(String invoiceId) {
    try {
            System.out.println("Start: removeLineItemRow()");
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            System.out.println("After execution getLineItemDetailsEOView1::" +
                               vo.getEstimatedRowCount());
            if (vo.getEstimatedRowCount() > 0) {
                System.out.println("Within vo.getEstimatedRowCount()" +
                                   vo.getEstimatedRowCount());
                RowSetIterator rowSetIterator = vo.createRowSetIterator(null);
                if (rowSetIterator != null) {
                    int i = 0;
                    int recDeleted = 0;
                    while (rowSetIterator.hasNext()) {
                        Row selectedRow = rowSetIterator.next();
                        int lineNumber =
                            Integer.parseInt(selectedRow.getAttribute("LineNumber").toString().trim());
                        String isSelected =
                            (String)selectedRow.getAttribute("isSelected");

                        System.out.println("i =" + i);
                        System.out.println("lineNumber =" + lineNumber);
                        System.out.println("isSelected =" + isSelected);
                        if (selectedRow.getAttribute("InvoiceId").toString().equals(invoiceId)) {
                            if (null !=
                                selectedRow.getAttribute("isSelected") &&
                                selectedRow.getAttribute("isSelected").equals("Y")) // && ("Y".equalsIgnoreCase((String)row.getAttribute("SelectTr")) ))
                            {
                                vo.setCurrentRow(selectedRow);
                                vo.removeCurrentRow();
//                                selectedRow.remove();
                                recDeleted++;
                            }
                        }
                        i++;
                    }
                    rowSetIterator.closeRowSetIterator();
                }
            }
        System.out.println("B4 Commit");
        getDBTransaction().commit();
        System.out.println("After Commit");        
        vo.executeQuery();
//        vo.clearCache();
        System.out.println("After executing vo::"+vo.getEstimatedRowCount());
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
//    getDeletedEmpCount().setValue("Records  Deleted: "+recDeleted);
//    OperationBinding comt = (OperationBinding)bindings.getOperationBinding("Commit");
//    comt.execute();
    }
    /* *********** */
    public void removeLineItemRowOld(String invoiceId, String lineId) {
            System.out.println("Start: removeLineItemRow()");
            RowSetIterator rowSetIterator = null;
            try{       
                ViewObjectImpl vo = getLineItemDetailsEOView1();
//                
//                RowSetIterator rsI = vo.createRowSetIterator(null);
//                
//                while(rsI.hasNext()){
//                    Row row = rsI.next();
//                    if(row.getAttribute("InvoiceId").toString().equals(invoiceId)){
//                        System.out.println("Within proper invoice:"+row.getAttribute("InvoiceId"));
//                        if (null != row &&  row.getAttribute("LineNumber")!=null && row.getAttribute("LineNumber").toString().equals(lineId)) {
//                            System.out.println("selected line number: "+row.getAttribute("LineNumber")); 
//                            //selectedRow.refresh(Row.REFRESH_WITH_DB_FORGET_CHANGES);
//                            row.remove();
//                            break;
//                        }
//                    } 
//                    
//                }
//                
//                rsI.closeRowSetIterator();
                System.out.println("After execution getLineItemDetailsEOView1::"+vo.getEstimatedRowCount());
                if(vo.getEstimatedRowCount() > 0){     
                    System.out.println("Within vo.getEstimatedRowCount()"+vo.getEstimatedRowCount());              
                    Row selectedRow=vo.getCurrentRow();                
                    System.out.println("selectedRow on removeLineItemRow"+selectedRow);
                    System.out.println("selectedRow.getAttribute(\"LineNumber\")***"+selectedRow.getAttribute("LineNumber"));
                    System.out.println("selectedRow.getAttribute(\"UnitPrice\")***"+selectedRow.getAttribute("UnitPrice"));
                    if(selectedRow.getAttribute("InvoiceId").toString().equals(invoiceId)){
                        System.out.println("Within proper invoice:"+selectedRow.getAttribute("InvoiceId"));
                    if (null != selectedRow &&  selectedRow.getAttribute("LineNumber")!=null && selectedRow.getAttribute("LineNumber").toString().equals(lineId)) {
                        System.out.println("selected line number: "+selectedRow.getAttribute("LineNumber")); 
                        //selectedRow.refresh(Row.REFRESH_WITH_DB_FORGET_CHANGES);
                        selectedRow.remove();
                    }
                    }                
                } 
                
            }catch (JboSQLException e) {
    //            getDBTransaction().rollback();
                e.printStackTrace();
            } catch (Exception e) {
    //            getDBTransaction().rollback();
                e.printStackTrace();
            }finally{
                if(rowSetIterator!=null){
                    rowSetIterator.closeRowSetIterator();    
                }
            }
            System.out.println("End: removeLineItemRow()");
        }


    /* public void removeLineItemRow(String invoiceId, String lineId) {
        System.out.println("Start: removeLineItemRow() : "+new Date());
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            ViewCriteria vc2 = vo.getViewCriteria("LineItemDetailsEOViewCriteria");
            vo.applyViewCriteria(vc2);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();
            System.out.println("vo.getEstimatedRowCount() : "+vo.getEstimatedRowCount());
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row &&  row.getAttribute("LineNumber")!=null && row.getAttribute("LineNumber").toString().equals(lineId)) {
                        row.remove();
                    }
                }
                //getDBTransaction().commit();    
            }    
        }catch (JboSQLException e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: removeLineItemRow()");
    } */

    /**
     * Container's getter for GetMaxLineNumberVO1.
     * @return GetMaxLineNumberVO1
     */
    public ViewObjectImpl getGetMaxLineNumberVO1() {
        return (ViewObjectImpl)findViewObject("GetMaxLineNumberVO1");
    }

    /**
     * Container's getter for CertifierVO1.
     * @return CertifierVO1
     */
    public CertifierVOImpl getCertifierVO1() {
        return (CertifierVOImpl)findViewObject("CertifierVO1");
    }

    /**
     * Container's getter for ExpenditureVO1.
     * @return ExpenditureVO1
     */
    public ExpenditureVOImpl getExpenditureVO1() {
        return (ExpenditureVOImpl)findViewObject("ExpenditureVO1");
    }

    /**
     * Container's getter for HeaderLineVO1.
     * @return HeaderLineVO1
     */
    public HeaderLineVOImpl getHeaderLineVO1() {
        return (HeaderLineVOImpl)findViewObject("HeaderLineVO1");
    }

    /**
     * Container's getter for POVO1.
     * @return POVO1
     */
    public POVOImpl getPOVO1() {
        return (POVOImpl)findViewObject("POVO1");
    }

    /**
     * Container's getter for ProjectVO1.
     * @return ProjectVO1
     */
    public ProjectVOImpl getProjectVO1() {
        return (ProjectVOImpl)findViewObject("ProjectVO1");
    }

    /**
     * Container's getter for SitesDetailsVO1.
     * @return SitesDetailsVO1
     */
    public ViewObjectImpl getSitesDetailsVO1() {
        return (ViewObjectImpl)findViewObject("SitesDetailsVO1");
    }

    /**
     * Container's getter for SitesVO1.
     * @return SitesVO1
     */
    public SitesVOImpl getSitesVO1() {
        return (SitesVOImpl)findViewObject("SitesVO1");
    }

    /**
     * Container's getter for ReasonTypeVO1.
     * @return ReasonTypeVO1
     */
    public ViewObjectImpl getReasonTypeVO1() {
        return (ViewObjectImpl)findViewObject("ReasonTypeVO1");
    }

    /**
     * Container's getter for StatusVO1.
     * @return StatusVO1
     */
    public ViewObjectImpl getStatusVO1() {
        return (ViewObjectImpl)findViewObject("StatusVO1");
    }

    /**
     * Container's getter for ReasonTypeVO2.
     * @return ReasonTypeVO2
     */
    public ViewObjectImpl getReasonTypeVO2() {
        return (ViewObjectImpl)findViewObject("ReasonTypeVO2");
    }

    /**
     * Container's getter for ErrorCodeLookupVO1.
     * @return ErrorCodeLookupVO1
     */
    public ViewObjectImpl getErrorCodeLookupVO1() {
        return (ViewObjectImpl)findViewObject("ErrorCodeLookupVO1");
    }

    /**
     * Container's getter for ReasonCodeVO1.
     * @return ReasonCodeVO1
     */
    public ViewObjectImpl getReasonCodeVO1() {
        return (ViewObjectImpl)findViewObject("ReasonCodeVO1");
    }

    /**
     * Container's getter for ReasonCodeVO2.
     * @return ReasonCodeVO2
     */
    public ViewObjectImpl getReasonCodeVO2() {
        return (ViewObjectImpl)findViewObject("ReasonCodeVO2");
    }

    public void updateTwoFields(String viewObjName, String viewCritName, String bindValName, String bindVal,
                                String field1Name, String field1Val, String field2Name, String field2Val) {

        System.out.println("Start: updateTwoFields()");
        System.out.println("viewObjName: "+viewObjName);
        System.out.println("viewCritName: "+viewCritName);
        System.out.println("bindValName: "+bindValName);
        System.out.println("bindVal: "+bindVal);
        System.out.println("field1Name: "+field1Name);
        System.out.println("field1Val: "+field1Val);
        System.out.println("field2Name: "+field2Name);
        System.out.println("field2Val: "+field2Val);
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = (ViewObjectImpl)findViewObject(viewObjName);
            ViewCriteria vc = vo.getViewCriteria(viewCritName);
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam(bindValName, bindVal);
            vo.executeQuery();          
            System.out.println("----------------getEstimatedRowCount: "+vo.getEstimatedRowCount());
            if(vo.getEstimatedRowCount() > 0){         
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    System.out.println("------------------Inside Hasnext-----------------");
                    Row row = rowSetIterator.next();
                    System.out.println("------------------row: "+row);
                    if (null != row) {
                        row.setAttribute(field1Name, field1Val); 
                        row.setAttribute(field2Name, field2Val); 
                    }
                }
            }
            getDBTransaction().commit();     
            System.out.println("Update Commited");   
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: updateTwoFields()");
    }
        
    public void saveOperationCertifierPage(String invoiceId) {

        System.out.println("Start: saveOperationCertifierPage() : "+invoiceId+", "+new Date());
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {     
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                            
                            System.out.println("On saving lineTotalToBeSaved saveOperationCertifierPage...."+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            
                            if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().contains(",")){
                                row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().replaceAll(",", ""));
                                
                            }
                            else{
                            row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            }
                            
                            
                            
                            
                            //row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                        }
                        
                       /* if(ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved")!=null){
                            
                            row.setAttribute("TaxAmount", ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved").toString());
                        }
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved")!=null){
                            row.setAttribute("CurrencyEquivalent", ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved").toString());
                        
                        }*/
                        
                        
                      
                        
                        
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("ModifiedBy ADF");
                        row.setAttribute("HeaderAttr9", "From_ADF_Certifier_Save");
                        System.out.println("HeaderAttr9 is from_adf");             
                        
                        System.out.println("===== Certifier Save Operation ====="+new Date());
                        System.out.println(
                            "invoiceId:"+invoiceId                            
                        );
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: saveOperationCertifierPage()");        
    }
    
    public void saveCertifierDetails(String invoiceId, String poNum,String alternateApprover) {
        System.out.println("invid: "+invoiceId+" Start: saveCertifierDetails()");
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {
           //             System.out.println("-------------supName: "+supName);
             //           row.setAttribute("SiteId", siteId); 
               //         row.setAttribute("SupplierName", supName); 
                 //       row.setAttribute("InvoiceNumber", invNum); 
                   //     row.setAttribute("TaxRegNumber", taxRegNum); 
                        row.setAttribute("PoNumber", poNum); 
                        row.setAttribute("AlternateApprover", alternateApprover);
                        if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                            
                            System.out.println("On saving lineTotalToBeSaved saveCertifierDetails...."+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            
                            if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().contains(",")){
                                row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().replaceAll(",", ""));
                                
                            }
                            else{
                            row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            }
                        }
                       /* if(ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved")!=null){
                                                    
                                                    row.setAttribute("TaxAmount", ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved").toString());
                              }
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved")!=null){
                            row.setAttribute("CurrencyEquivalent", ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved").toString());
                        
                        }*/
                        
                        if(poNum != null)
                            row.setAttribute("HeaderAttr4", "PO_ENTERED");
                        
                        System.out.println("invid: "+invoiceId+"  Certifier");
                        
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("invid: "+invoiceId+"  ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("invid: "+invoiceId+"  ModifiedBy ADF");
                        row.setAttribute("HeaderAttr9", "From_ADF_Certifier_Submit");
                        System.out.println("invid: "+invoiceId+"  Attr9 is from_adf");
                        
                     //   row.setAttribute("CertifierName", certName); 
                       // row.setAttribute("CurrencyCode", currency); 
                        //row.setAttribute("InvoiceDate", invDate); 
                        //row.setAttribute("TaxAmount", taxTotal); 
                        //row.setAttribute("InvoiceTotAmount", headerTotal); 
                        //row.setAttribute("CertifierEmailAdd", certEmail); 
                        
                        System.out.println("invid: "+invoiceId+"  ===== Certifier Submit Operation ====="+new Date());
                        System.out.println(
                            "invoiceId:"+invoiceId+", "+
                            "poNum:"+poNum+", "+
                            "alternateApprover:"+alternateApprover                         
                        );
                        System.out.println("invid: "+invoiceId+"  ===== Line details =====");
                        showLineItemDetails(invoiceId);
                        System.out.println("invid: "+invoiceId+"  ===== Certifier Submit Operation Finished ====="+new Date());
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("invid: "+invoiceId+"  End: saveCertifierDetails()");
    }
    
    public void showLineItemDetails(String invoiceId) {
        System.out.println("Start: showLineItemDetails()" + new Date());
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("LineItemDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {   
                        System.out.println("invid: "+invoiceId+"  GlNo : "+row.getAttribute("GlNo"));
                        System.out.println("InvoiceId : "+row.getAttribute("InvoiceId"));
                        System.out.println("invid: "+invoiceId+"  LineNumber : "+row.getAttribute("LineNumber"));
                        System.out.println("invid: "+invoiceId+"  LineType : "+row.getAttribute("LineType"));
                        System.out.println("invid: "+invoiceId+"  LinePoNum : "+row.getAttribute("LinePoNum"));
                        System.out.println("invid: "+invoiceId+"  PoLineNum : "+row.getAttribute("PoLineNum")); 
                        System.out.println("invid: "+invoiceId+"  GlNo : "+row.getAttribute("GlNo"));
                        System.out.println("invid: "+invoiceId+"  ProjectNo : "+row.getAttribute("ProjectNo"));
                        System.out.println("invid: "+invoiceId+"  TaskNo : "+row.getAttribute("TaskNo"));
                        System.out.println("invid: "+invoiceId+"  ExpinditureOrg : "+row.getAttribute("ExpinditureOrg"));
                        System.out.println("invid: "+invoiceId+"  ExpenditureDate : "+row.getAttribute("ExpenditureDate"));
                        System.out.println("invid: "+invoiceId+"  Attr10 : "+row.getAttribute("Attr10"));
                    }
                }
            }
            //getDBTransaction().commit();        
        } catch (Exception e) {
            //getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null){
                rowSetIterator.closeRowSetIterator();    
            }
        }
        System.out.println("invid: "+invoiceId+"  End: showLineItemDetails()" + new Date());
    }
    
    public void saveLineDetails() {
        System.out.println("Start: saveLineDetails()");
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getLineItemDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("LineItemDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
         // vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {           
                        row.setAttribute("GlNo", null);
                        row.setAttribute("ProjectNo", null);
                        row.setAttribute("TaskNo", null);
                        row.setAttribute("ExpinditureOrg", null);
                        row.setAttribute("ExpenditureDate", null);
                        row.setAttribute("Attr10", null);                        
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
                if(rowSetIterator!=null) {
                    try {
                        rowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();
                    
                }
                }
        }
        System.out.println("End: saveLineDetails()");
    }
    
    public void rejectCertifierDetails(String invoiceId, String rejectComment, String invalidReason, String invalidReasonType) {
        System.out.println("Start: rejectCertifierDetails()");
        System.out.println("Invalid reason :: "+ invalidReason + "Invalid reason type :: "+ invalidReasonType);
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {
                        row.setAttribute("CertifierRejComments", rejectComment);
                        row.setAttribute("InvalidReason", invalidReason);
                        row.setAttribute("InvalidReasonType", invalidReasonType);
                        row.setAttribute("HeaderAttr3",""); 
                        System.out.println("certifier rejection");
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("ModifiedBy ADF");
                        row.setAttribute("HeaderAttr9", "From_ADF_Certifier_Reject");
                        System.out.println("HeaderAttr9 is from_adf");
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                            
                            System.out.println("On saving lineTotalToBeSaved rejectCertifierDetails...."+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            
                           
                            if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().contains(",")){
                                row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().replaceAll(",", ""));
                                
                            }
                            else{
                            row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            }
                           
                           
                            //row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                        }
                        
                        /*if(ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved")!=null){
                                                    
                                                    row.setAttribute("TaxAmount", ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved").toString());
                         }
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved")!=null){
                            row.setAttribute("CurrencyEquivalent", ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved").toString());
                        
                        }*/
                        
                        
                       
                        System.out.println("===== Certifier Reject Operation ====="+new Date());
                        System.out.println(
                            "invoiceId:"+invoiceId+", "+
                            "rejectComment:"+rejectComment+", "+
                            "invalidReason:"+invalidReason+", "+
                            "invalidReasonType:"+invalidReasonType
                        );
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: rejectCertifierDetails()");
    }
    public void reassignCertifier(String invoiceId, String name, String userId,String reassignComments) {
        System.out.println("Start: reassignCertifier()");
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {
                        row.setAttribute("CertifierReassignComments", reassignComments); 
                       // row.setAttribute("CertifierReassignTo", name);  on 22nd Sept
                       row.setAttribute("CertifierName", name);  
                        System.out.println("certifier reassign");
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
//                        row.setAttribute("ModifiedBy", "ADF"); 
//                        System.out.println("ModifiedBy ADF");
//                        row.setAttribute("Attr9", "From_ADF");
//                        System.out.println("Attr9 is from_adf");
                        
                        //row.setAttribute("ModifiedBy", "BPM"); 
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("ModifiedBy BPM");
                        //row.setAttribute("Attr9", "FROM_BPM");
                        //row.setAttribute("Attr9", "FROM_BPM");
                        row.setAttribute("HeaderAttr9", "From_ADF_Certifier_Reassign");
                        row.setAttribute("AlternateApprover", "");
                        System.out.println("HeaderAttr9 is FROM_BPM");
                        
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                            
                            System.out.println("On saving lineTotalToBeSaved reassignCertifier...."+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            
                            if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().contains(",")){
                                row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().replaceAll(",", ""));
                                
                            }
                            else{
                            row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                            }
                            
                            
                            //row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                        }
                        
                        /*if(ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved")!=null){
                                                    
                                                    row.setAttribute("TaxAmount", ADFContext.getCurrent().getPageFlowScope().get("taxTotItToBeSaved").toString());
                         }
                        if(ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved")!=null){
                            row.setAttribute("CurrencyEquivalent", ADFContext.getCurrent().getPageFlowScope().get("currencyEquivalentToBeSaved").toString());
                        
                        }*/
                        /*Reassigment change 22nd Sept*/
                        if(ADFContext.getCurrent().getPageFlowScope().get("Reassign_EmailAddress")!=null){
                            System.out.println("Reassign_EmailAddress from ApIMPL :: "+ADFContext.getCurrent().getPageFlowScope().get("Reassign_EmailAddress").toString());
                            
                            row.setAttribute("CertifierEmailAdd", ADFContext.getCurrent().getPageFlowScope().get("Reassign_EmailAddress").toString());
                            
                            
                        }
                        
                        /*Setting certifier employeeNumber on reassignment as per 22ndSept requirment*/
                        
                        row.setAttribute("EmployeeNumber", userId);
                        
                        
                        System.out.println("===== Certifier Reassign Operation ====="+new Date());
                        System.out.println(
                            "invoiceId:"+invoiceId+", "+
                            "name:"+name+", "+
                            "userId:"+userId+", "+
                            "reassignComments:"+reassignComments
                        );
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: reassignCertifier()");
    }
    /**
     * Container's getter for ReasonTypeVO3.
     * @return ReasonTypeVO3
     */
    public ViewObjectImpl getReasonTypeVO3() {
        return (ViewObjectImpl)findViewObject("ReasonTypeVO3");
    }

    /**
     * Container's getter for ReasonInvalidTypeVO1.
     * @return ReasonInvalidTypeVO1
     */
    public ViewObjectImpl getReasonInvalidTypeVO1() {
        return (ViewObjectImpl)findViewObject("ReasonInvalidTypeVO1");
    }

    /**
     * Container's getter for ReasonInvalidCodeVO1.
     * @return ReasonInvalidCodeVO1
     */
    public ViewObjectImpl getReasonInvalidCodeVO1() {
        return (ViewObjectImpl)findViewObject("ReasonInvalidCodeVO1");
    }

    /**
     * Container's getter for PropertyTableVO1.
     * @return PropertyTableVO1
     */
    public ViewObjectImpl getPropertyTableVO1() {
        return (ViewObjectImpl)findViewObject("PropertyTableVO1");
    }
    /**
     * Container's getter for AuditTableVO1.
     * @return AuditTableVO1
     */
    public ViewObjectImpl getAuditTableVO1() {
        return (ViewObjectImpl)findViewObject("AuditTableVO1");
    }

    /**
     * Container's getter for DuplicateRecordCheckVO1.
     * @return DuplicateRecordCheckVO1
     */
    public ViewObjectImpl getDuplicateRecordCheckVO1() {
        return (ViewObjectImpl)findViewObject("DuplicateRecordCheckVO1");
    }

    /**
     * Container's getter for DuplicateInvoiceExclusionStatusListVO1.
     * @return DuplicateInvoiceExclusionStatusListVO1
     */
    public ViewObjectImpl getDuplicateInvoiceExclusionStatusListVO1() {
        return (ViewObjectImpl)findViewObject("DuplicateInvoiceExclusionStatusListVO1");
    }

    /**
     * Container's getter for GetEmailDetailsVO1.
     * @return GetEmailDetailsVO1
     */
    public ViewObjectImpl getGetEmailDetailsVO1() {
        return (ViewObjectImpl)findViewObject("GetEmailDetailsVO1");
    }

    /**
     * Container's getter for ApCommentsTableVO1.
     * @return ApCommentsTableVO1
     */
    public ViewObjectImpl getApCommentsTableVO1() {
        return (ViewObjectImpl)findViewObject("ApCommentsTableVO1");
    }
    
    public void updateHoldReleaseComments(String invoiceId, String comments) {
        System.out.println("CertifierReassignComments  onHoldRelease");
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {         
                             
                         row.setAttribute("CertifierReassignComments", comments); 
                         System.out.println("CertifierReassignComments  onHoldRelease updated");
                       
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: updateInternalStatus()");
    }
 
    
    
    
    public void updateInternalStatus(String invoiceId, String internalStatus) {
        System.out.println("Start: updateInternalStatus()");
        RowSetIterator rowSetIterator = null;
        try{       
            ViewObjectImpl vo = getHeaderDetailsEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    Row row = rowSetIterator.next();
                    if (null != row) {         
                        
                        if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved")!=null){
                            
                             System.out.println("On saving lineTotalToBeSaved updateInternalStatus...."+ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());  
                           
                             if(ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().contains(",")){
                                
                                row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString().replaceAll(",", ""));
                                                           
                               }
                               else{
                               row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                               }
                               
                        
                         // row.setAttribute("HeaderAttr1", ADFContext.getCurrent().getPageFlowScope().get("lineTotalToBeSaved").toString());
                         }
                        
                        
                        
                        row.setAttribute("InternalStatus", internalStatus);                  
                    }
                }
            }
            getDBTransaction().commit();        
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        System.out.println("End: updateInternalStatus()");
    }

    /**
     * Container's getter for eQApproverDetails1.
     * @return eQApproverDetails1
     */

    
    public void calculateWHTAmount(String SupplierSiteNumber,String invoiceDate,String currencyCodes,String orgID){
        
        System.out.println("Inside : calculateWHTAmount");
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        RowSetIterator rowSetIterator = null;
        List<ap.qantas.com.ebsCalculateWHTAmountService.LineItemTable> lineTable = new ArrayList<ap.qantas.com.ebsCalculateWHTAmountService.LineItemTable>();
        String glDate = sdf.format(new Date());
        
        Map<Integer,String> WHTResult = new HashMap<Integer,String>();
        
                                                 
        try{ 
                
                Date invDate = sdf.parse(invoiceDate);
                
                
//                DCBindingContainer dcBindingContainer = (DCBindingContainer) BindingContext.getCurrent().getCurrentBindingsEntry(); 
//                DCIteratorBinding dcIteratorBinding = dcBindingContainer.findIteratorBinding("LineItemDetailsEOView1Iterator");
                ViewObjectImpl vo2 = getLineItemDetailsEOView1();
                if(ADFContext.getCurrent().getPageFlowScope().get("calculateWHTAmountOnValueChange")!=null){
                    vo2.getCurrentRow().setAttribute("WhtCode", ADFContext.getCurrent().getPageFlowScope().get("calculateWHTAmountOnValueChange").toString()); 
                    System.out.println(" WhtCode set for  CurrentRow ");
                    
                }
                rowSetIterator = vo2.createRowSetIterator(null);
                
                
                
                
                int i = 0;
                BigDecimal ob1 = null;
                while(rowSetIterator.hasNext()) {
                                    ap.qantas.com.ebsCalculateWHTAmountService.LineItemTable ob = new ap.qantas.com.ebsCalculateWHTAmountService.LineItemTable();
                                    Row row = rowSetIterator.next();
                                    if (row != null) { 
                                        
                                        
                                        if(row.getAttribute("LineTotalAmount") != null)
                                            
                                            ob1 = new BigDecimal(row.getAttribute("LineTotalAmount").toString());
                                        else
                                            ob1 = new BigDecimal(0);
                                        
                                        ob.setLineamount(ob1);
                                        ob.setAwtgroupname(row.getAttribute("WhtCode") != null ?row.getAttribute("WhtCode").toString() : null);
                                        if(row.getAttribute("WhtCode")!=null){
                                            System.out.println("WHTCode before setting ...... "+ row.getAttribute("WhtCode").toString());
                                        }
                                        
                                        ob.setAwtdate(invoiceDate);
                                        ob.setGldate(glDate);
                                        ob.setInvcurrencycode(currencyCodes);
                                        if(orgID!=null){ob.setOrgid(new BigDecimal(orgID));}
                                        ob.setSuppliersiteid(new BigDecimal(SupplierSiteNumber));
                                        lineTable.add(i,ob);
                                        
                                    }
                    i++;
                }
            
            
            if(lineTable.size() > 0){
                
                ObjectFactory obj = new ObjectFactory();
                List<APPSJSEQAPWHTRECORD> lineItemTableDetails = new ArrayList<APPSJSEQAPWHTRECORD>();
                for(int j = 0 ; j < lineTable.size() ; j++){
                    
                    APPSJSEQAPWHTRECORD ob = new APPSJSEQAPWHTRECORD();
                    ob.setAWTGROUPNAME(obj.createAPPSJSEQAPWHTRECORDAWTGROUPNAME(lineTable.get(j).getAwtgroupname()));
                    ob.setINVCURRENCYCODE(obj.createAPPSJSEQAPWHTRECORDINVCURRENCYCODE(lineTable.get(j).getInvcurrencycode()));
                    ob.setAWTDATE(obj.createAPPSJSEQAPWHTRECORDAWTDATE(lineTable.get(j).getAwtdate()));
                    ob.setGLDATE(obj.createAPPSJSEQAPWHTRECORDGLDATE(lineTable.get(j).getGldate()));
                    ob.setORGID(obj.createAPPSJSEQAPWHTRECORDORGID(lineTable.get(j).getOrgid()));
                    ob.setSUPPLIERSITEID(obj.createAPPSJSEQAPWHTRECORDSUPPLIERSITEID(lineTable.get(j).getSuppliersiteid()));
                    ob.setLINEAMOUNT(obj.createAPPSJSEQAPWHTRECORDLINEAMOUNT(lineTable.get(j).getLineamount()));
                    System.out.println("Awt Group : "+lineTable.get(j).getAwtgroupname());
                    System.out.println("Awt Date : "+lineTable.get(j).getAwtdate());
                    System.out.println("Line Amount : "+lineTable.get(j).getLineamount());
                    System.out.println("Org Id : "+lineTable.get(j).getOrgid());
                    System.out.println("Inv currency Code : "+lineTable.get(j).getInvcurrencycode());
                    System.out.println("Supplier Site Id : "+lineTable.get(j).getSuppliersiteid());
                    System.out.println("GL Date : "+lineTable.get(j).getGldate());
                    lineItemTableDetails.add(j,ob);
                    
                }
                
                WHTResult = JSEQ_AP_INV_IMG_PROCESS_CAL_AMTPortClient.getWHTAmount(lineItemTableDetails, null);
                if(WHTResult != null){
                    ADFContext.getCurrent().getPageFlowScope().put("whtAmount",WHTResult.get(0));
                    ADFContext.getCurrent().getPageFlowScope().put("errorMessage",WHTResult.get(1));
                }
                    
            }
                
        }catch(Exception e){
            e.printStackTrace();
        }finally{
            if(rowSetIterator!=null) {
                try {
                    rowSetIterator.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        ADFContext.getCurrent().getPageFlowScope().put("calculateWHTAmountOnValueChange",null);
        System.out.println("End : calculateWHTAmount new");
        
    }
    public eQApproverDetailsImpl geteQApproverDetails1() {
        return (eQApproverDetailsImpl)findViewObject("eQApproverDetails1");
    }
}
