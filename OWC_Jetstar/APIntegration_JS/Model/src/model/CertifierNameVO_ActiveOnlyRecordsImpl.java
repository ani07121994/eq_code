package model;

import java.sql.ResultSet;


import javax.faces.context.FacesContext;

import model.common.CertifierNameVO_ActiveOnlyRecords;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 11 11:13:06 IST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CertifierNameVO_ActiveOnlyRecordsImpl extends ViewObjectImpl implements CertifierNameVO_ActiveOnlyRecords {
    /**
     * This is the default constructor (do not remove).
     */
    public CertifierNameVO_ActiveOnlyRecordsImpl() {
    }


    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params,
                                             int noUserParams) {
        System.out.println("Updated Certifier query SQL 13thMarch updateddd = " + getQuery());
        if (params != null) {
            for (int i = 0; i < params.length; i++) {
            
                System.out.println("Query param"+ params[i].toString());
            }
        }
        
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc,
                                                 ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }
    
    public void  filterCertifierByOU_Names(String bindName,String bvEmployeeID,String bindEmailAddress,String ou_namesSeperatedByComma,String viewCriteriaName,String methodName){
           System.out.println("Inside upadted filterCertifierByOU_Names ou_namesSeperatedByComma :: "+ou_namesSeperatedByComma +"ViewCriteriaNmae :: "+viewCriteriaName);
            System.out.println("currentCertifierID in filterCertifierByOU_Names :: "+methodName);
            
          /* if(bindEmailAddress!=null){
               viewCriteriaName="CertifierNameVO_ActiveOnlyRecordsCriteriabyEmailAddress";  
           }
           else if(bvEmployeeID!=null){
               viewCriteriaName="CertifierNameVO_ActiveOnlyRecordsCriteriaByEmployeeNum";  
           }*/
            this.setRangeSize(-1);
            ViewCriteria vc =this.getViewCriteriaManager().getViewCriteria(viewCriteriaName);
            if(viewCriteriaName.equals("CertifierNameVO_ActiveOnlyRecordsCriteria")){
                
                this.removeViewCriteria("CertifierNameVOCriteria");
            }
            
        
        
            if(vc!=null){  //reset the viewcriteria iff set previously  
                vc.resetCriteria();}
            
        
            String inClause = "IN (" + ou_namesSeperatedByComma + ")";
            //Create a criteria row for the in clause
            ViewCriteriaRow criteriaRow = vc.createViewCriteriaRow();
            criteriaRow.setConjunction(ViewCriteriaRow.VC_CONJ_AND);                      
            criteriaRow.setAttribute(CertifierNameVO_ActiveOnlyRecordsRowImpl.OPERATINGUNIT, inClause);
            vc.addRow(criteriaRow);
            //Apply the criteria (appended to the existing one => true)
            this.applyViewCriteria(vc, true);
            
            
            String inClause1 = "NOT IN (" + methodName + ")";
            //Create a criteria row for the in clause
            ViewCriteriaRow criteriaRow1 = vc.createViewCriteriaRow();
            criteriaRow1.setConjunction(ViewCriteriaRow.VC_CONJ_AND);                      
            criteriaRow1.setAttribute(CertifierNameVO_ActiveOnlyRecordsRowImpl.EMPLOYEENUMBER, inClause1);
            vc.addRow(criteriaRow1);
            //Apply the criteria (appended to the existing one => true)
            this.applyViewCriteria(vc, true);
            
            
            
            
            
            
            if(viewCriteriaName!=null && viewCriteriaName.equals("CertifierNameVO_ActiveOnlyRecordsCriteria")){
                System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteria ......");
                if(bindName!=null){
               
                    System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteria bindName......"+bindName);
                    this.setNamedWhereClauseParam("bindName", bindName);
                    this.setNamedWhereClauseParam("bindEmailAddress", null);
                    this.setNamedWhereClauseParam("bvEmployeeID", null);
                  //  this.setNamedWhereClauseParam("currentCertifierId", methodName);
                }
                else if(bvEmployeeID!=null){
                    System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteria bvEmployeeID......"+bvEmployeeID);
                    this.setNamedWhereClauseParam("bindEmailAddress", null);
                    this.setNamedWhereClauseParam("bvEmployeeID", bvEmployeeID);
                    this.setNamedWhereClauseParam("bindName", null);
                  //  this.setNamedWhereClauseParam("currentCertifierId", methodName);
                }
                else if(bindEmailAddress!=null){
                    System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteria bindEmailAddress......"+bindEmailAddress);
                    this.setNamedWhereClauseParam("bindEmailAddress", bindEmailAddress);
                    this.setNamedWhereClauseParam("bvEmployeeID", null);
                    this.setNamedWhereClauseParam("bindName", null);
                  //  this.setNamedWhereClauseParam("currentCertifierId", methodName);
                }
                System.out.println("executing CertifierNameVO_ActiveOnlyRecordsCriteria query updated");
                this.executeQuery();
            }
            else if(viewCriteriaName!=null && viewCriteriaName.equals("CertifierNameVOCriteria")){
                System.out.println("Inside CertifierNameVOCriteria ......");
                //System.out.println("Inside CertifierNameVOCriteria ......"+bvEmployeeID);
                if(bindName!=null){
                     System.out.println("Inside CertifierNameVOCriteria ......"+bindName);
                this.setNamedWhereClauseParam("bindName", bindName);
                 }
                /*if(bvEmployeeID!=null){
                System.out.println("Inside CertifierNameVOCriteria bvEmployeeID......"+bvEmployeeID);
                this.setNamedWhereClauseParam("bvEmployeeID", bvEmployeeID);
                }*/
                
                this.executeQuery();
                //this.setNamedWhereClauseParam("bindName", bindName);
                //this.setNamedWhereClauseParam("bvEmployeeID", bvEmployeeID);
            }
           
            
           /* else if(viewCriteriaName!=null && viewCriteriaName.equals("CertifierNameVO_ActiveOnlyRecordsCriteriaByEmployeeNum")){
                System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteriaByEmployeeNum ......"+bvEmployeeID);
               
                this.setNamedWhereClauseParam("bvEmployeeID", bvEmployeeID);  
            }
            
            else if(viewCriteriaName!=null && viewCriteriaName.equals("CertifierNameVO_ActiveOnlyRecordsCriteriabyEmailAddress")){
                System.out.println("Inside CertifierNameVO_ActiveOnlyRecordsCriteriabyEmailAddress ......"+bindEmailAddress);
                this.setNamedWhereClauseParam("bindEmailAddress", bindEmailAddress);
            }*/

            //this.executeQuery();
        
            System.out.println("getEstimatedRowCount for :: "+viewCriteriaName +" = "+this.getEstimatedRowCount());
         /*   if(this.getEstimatedRowCount()>0 && ( methodName!=null && !methodName.equals("onReassignToPopUpGoClick"))){
            while (this.hasNext()) { 
              Row row = this.next(); // Get the next row in the result set.
              if(null != row.getAttribute("EmployeeNumber"))
              {
              String alterNameApproverNumber = row.getAttribute("EmployeeNumber").toString();     
              System.out.println("alterNameApproverNumber"+alterNameApproverNumber);
              ADFContext.getCurrent().getViewScope().put("alterNameApproverNumber", alterNameApproverNumber);
              }
            }
           }*/
            
         
        
        
        
            
         
       /*  System.out.println("currentCertifierID in filterCertifierByOU_Names :: "+methodName);
         if(this.getEstimatedRowCount()>0 ){
                     while (this.hasNext()) { 
                       Row row = this.next(); 
                         
                         // Get the next row in the result set.
                         
                         if(methodName!=null && row.getAttribute("EmployeeNumber")!=null && (methodName.equals(row.getAttribute("EmployeeNumber").toString()))){
                             System.out.println("Removing the row containg current certifier details");
                             row.remove(); 
                         }
                       if(row.getAttribute("EmployeeNumber")!=null )
                       {
                       String alterNameApproverNumber = row.getAttribute("EmployeeNumber").toString();     
                       System.out.println("alterNameApproverNumber"+alterNameApproverNumber);
                       ADFContext.getCurrent().getViewScope().put("alterNameApproverNumber", alterNameApproverNumber);
                       }
                     }
           
        }*/
            
            
            
            System.out.println("End of filterCertifierByOU_Names");
        
    }


    /**
     * Returns the variable value for bindName.
     * @return variable value for bindName
     */
    public String getbindName() {
        return (String)ensureVariableManager().getVariableValue("bindName");
    }

    /**
     * Sets <code>value</code> for variable bindName.
     * @param value value to bind as bindName
     */
    public void setbindName(String value) {
        ensureVariableManager().setVariableValue("bindName", value);
    }

    /**
     * Returns the variable value for bvEmployeeID.
     * @return variable value for bvEmployeeID
     */
    public String getbvEmployeeID() {
        return (String)ensureVariableManager().getVariableValue("bvEmployeeID");
    }

    /**
     * Sets <code>value</code> for variable bvEmployeeID.
     * @param value value to bind as bvEmployeeID
     */
    public void setbvEmployeeID(String value) {
        ensureVariableManager().setVariableValue("bvEmployeeID", value);
    }

    /**
     * Returns the variable value for bindEmailAddress.
     * @return variable value for bindEmailAddress
     */
    public String getbindEmailAddress() {
        return (String)ensureVariableManager().getVariableValue("bindEmailAddress");
    }

    /**
     * Sets <code>value</code> for variable bindEmailAddress.
     * @param value value to bind as bindEmailAddress
     */
    public void setbindEmailAddress(String value) {
        ensureVariableManager().setVariableValue("bindEmailAddress", value);
    }


}
