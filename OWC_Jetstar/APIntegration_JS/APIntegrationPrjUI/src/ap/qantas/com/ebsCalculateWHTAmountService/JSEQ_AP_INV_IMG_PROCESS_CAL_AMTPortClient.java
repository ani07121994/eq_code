package ap.qantas.com.ebsCalculateWHTAmountService;

//import com.oracle.xmlns.pcbpel.adapter.db.sp.jseq_ap_inv_img_process_cal_amt.*;
import ap.qantas.com.ebsCalculateWHTAmountService.APPSJSEQAPWHTTBL;

import ap.qantas.com.ebsCalculateWHTAmountService.OutputParameters;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.Map;
import java.text.SimpleDateFormat;

import java.util.ArrayList;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import javax.xml.bind.JAXBElement;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeConstants;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.WebServiceRef;
// !THE CHANGES MADE TO THIS FILE WILL BE DESTROYED IF REGENERATED!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (11.1.1.0.0, build 130224.1947.04102)

public class JSEQ_AP_INV_IMG_PROCESS_CAL_AMTPortClient
{
  @WebServiceRef
  private static JSEQ_AP_INV_IMG_PROCESS_CAL_AMTService jSEQ_AP_INV_IMG_PROCESS_CAL_AMTService;

  public static void main(String [] args)
  {
    jSEQ_AP_INV_IMG_PROCESS_CAL_AMTService = new JSEQ_AP_INV_IMG_PROCESS_CAL_AMTService();
    JSEQ_AP_INV_IMG_PROCESS_CAL_AMT_ptt jSEQ_AP_INV_IMG_PROCESS_CAL_AMT_ptt = jSEQ_AP_INV_IMG_PROCESS_CAL_AMTService.getJSEQ_AP_INV_IMG_PROCESS_CAL_AMTPort();
    // Add your code to call the desired methods.
    java.util.GregorianCalendar cal1 = new java.util.GregorianCalendar();
    java.util.GregorianCalendar cal2 = new java.util.GregorianCalendar();
    
    try{
        
        InputParameters inputparams=new InputParameters();
        OutputParameters OutputParameters= jSEQ_AP_INV_IMG_PROCESS_CAL_AMT_ptt.jseqAPINVIMGPROCESSCALAMT(inputparams);
        
        SimpleDateFormat dateformat = new SimpleDateFormat("dd/MM/yyyy");
        String awtdate = "2017-05-15";
        String gldate = "2017-05-15";
        
        //Date awtDate1 = dateformat.parse(awtdate) ;
        //Date awtDate2 = dateformat.parse(gldate) ;
        
        //XMLGregorianCalendar sampleDate1 = toXMLGregorianCalendar(awtDate1);
        //XMLGregorianCalendar sampleDate2 = toXMLGregorianCalendar(awtDate2);
        
        
       // System.out.println("sample date :"+sampleDate1);
        
        String awtgroupname1 = "AUW10";
        BigDecimal lineamount1 = new BigDecimal(100);
        BigDecimal orgid1 = new BigDecimal(106);;
        String invcurrencycode1 = "AUD";
        BigDecimal suppliersiteid1 = new BigDecimal(441387);;  
        
       // cal1.setTime(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(awtdate)); 
       // cal2.setTime(new java.text.SimpleDateFormat("dd/MM/yyyy").parse(gldate)); 
        
        
//        
//        String awtgroupname2 = "AUD10";
//        BigDecimal lineamount2 = new BigDecimal(1000);
//        BigDecimal orgid2 = new BigDecimal(7092);;
//        String invcurrencycode2 = "AUD";
//        BigDecimal suppliersiteid2 = new BigDecimal(441387);;  
        ObjectFactory obj = new ObjectFactory();
        List<APPSJSEQAPWHTRECORD> lineItemTableDetails = new ArrayList<APPSJSEQAPWHTRECORD>();
        
        APPSJSEQAPWHTRECORD ob1 = new APPSJSEQAPWHTRECORD();
        ob1.setAWTGROUPNAME(obj.createAPPSJSEQAPWHTRECORDAWTGROUPNAME(awtgroupname1));
        ob1.setAWTDATE(obj.createAPPSJSEQAPWHTRECORDAWTDATE(awtdate));
        ob1.setLINEAMOUNT(obj.createAPPSJSEQAPWHTRECORDLINEAMOUNT(lineamount1));
        ob1.setORGID(obj.createAPPSJSEQAPWHTRECORDORGID(orgid1));
        ob1.setINVCURRENCYCODE(obj.createAPPSJSEQAPWHTRECORDINVCURRENCYCODE(invcurrencycode1));
        ob1.setSUPPLIERSITEID(obj.createAPPSJSEQAPWHTRECORDSUPPLIERSITEID(suppliersiteid1));
        ob1.setGLDATE(obj.createAPPSJSEQAPWHTRECORDGLDATE(gldate));
        
//        APPSJSEQAPWHTRECORD ob2 = new APPSJSEQAPWHTRECORD();
//        ob2.setAWTGROUPNAME(obj.createAPPSJSEQAPWHTRECORDAWTGROUPNAME(awtgroupname2));
//        ob2.setAWTDATE(obj.createAPPSJSEQAPWHTRECORDAWTDATE(sampleDate1));
//        ob2.setLINEAMOUNT(obj.createAPPSJSEQAPWHTRECORDLINEAMOUNT(lineamount2));
//        ob2.setORGID(obj.createAPPSJSEQAPWHTRECORDORGID(orgid2));
//        ob2.setINVCURRENCYCODE(obj.createAPPSJSEQAPWHTRECORDINVCURRENCYCODE(invcurrencycode2));
//        ob2.setSUPPLIERSITEID(obj.createAPPSJSEQAPWHTRECORDSUPPLIERSITEID(suppliersiteid2));
//        ob2.setGLDATE(obj.createAPPSJSEQAPWHTRECORDAWTDATE(sampleDate2));


//            ob1.setAwtgroupname(awtgroupname1);
//        ob1.setAwtdate(awtdate1);
//        ob1.setLineamount(lineamount1);
//        ob1.setOrgid(orgid1);
//        ob1.setInvcurrencycode(invcurrencycode1);
//        ob1.setSuppliersiteid(suppliersiteid1);
//        ob1.setGldate(gldate1);
//        
//        LineItemTable ob2 = new LineItemTable();
//        ob2.setAwtgroupname(awtgroupname2);
//        ob2.setAwtdate(awtdate2);
//        ob2.setLineamount(lineamount2);
//        ob2.setOrgid(orgid2);
//        ob2.setInvcurrencycode(invcurrencycode2);
//        ob2.setSuppliersiteid(suppliersiteid2);
//        ob2.setGldate(gldate2);
//        
        lineItemTableDetails.add(0,ob1);
       // lineItemTableDetails.add(1,ob2);
        
        getWHTAmount(lineItemTableDetails,null);

        System.out.println("OutputParameters :: "+OutputParameters);
        }catch(Exception e){
            e.printStackTrace();
        }
    }
  
    public static Map<Integer, String> getWHTAmount(List<APPSJSEQAPWHTRECORD> lineItemTableDetails, String val) {
      try {
        Map<Integer, String> WHTResult = new HashMap<Integer, String>();
        System.out.println("*****Main: Start ***************");
        jSEQ_AP_INV_IMG_PROCESS_CAL_AMTService = new JSEQ_AP_INV_IMG_PROCESS_CAL_AMTService();
        System.out.println("After initializing");
        ObjectFactory objectFactory = new ObjectFactory();
        for (int i = 0; i < lineItemTableDetails.size(); i++) {
          System.out.println("awt group name : " + (String)((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getAWTGROUPNAME().getValue());
          System.out.println("invdate : " + (String)((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getAWTDATE().getValue());
          System.out.println("gwtdate : " + (String)((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getGLDATE().getValue());
          System.out.println("org id : " + ((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getORGID().getValue());
          System.out.println("site id : " + ((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getSUPPLIERSITEID().getValue());
          System.out.println("currency : " + (String)((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getINVCURRENCYCODE().getValue());
          System.out.println("line amount : " + ((APPSJSEQAPWHTRECORD)lineItemTableDetails.get(i)).getLINEAMOUNT().getValue());
        } 
        InputParameters inputParam = objectFactory.createInputParameters();
        APPSJSEQAPWHTTBL linedetails = objectFactory.createAPPSJSEQAPWHTTBL();
        linedetails.pjseqapwhttblitem = lineItemTableDetails;
        inputParam.setPAWTSUCCESS(objectFactory.createInputParametersPAWTSUCCESS(val));
        inputParam.setPJSEQAPWHTTBL(objectFactory.createInputParametersPJSEQAPWHTTBL(linedetails));
        JSEQ_AP_INV_IMG_PROCESS_CAL_AMT_ptt objectptt = jSEQ_AP_INV_IMG_PROCESS_CAL_AMTService.getJSEQ_AP_INV_IMG_PROCESS_CAL_AMTPort();
        OutputParameters param = objectptt.jseqAPINVIMGPROCESSCALAMT(inputParam);
        if (param != null) {
          WHTResult.put(Integer.valueOf(0), (param.getAPCALCULATEWHTAMOUNTS().getValue() != null) ? ((BigDecimal)param.getAPCALCULATEWHTAMOUNTS().getValue()).toString() : null);
          WHTResult.put(Integer.valueOf(1), (param.getPAWTSUCCESS().getValue() != null) ? ((String)param.getPAWTSUCCESS().getValue()).toString() : null);
          System.out.println("amount :" + param.getAPCALCULATEWHTAMOUNTS().getValue());
          System.out.println("error msg : " + (String)param.getPAWTSUCCESS().getValue());
          return WHTResult;
        } 
        return null;
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      } 
    }

    public static XMLGregorianCalendar toXMLGregorianCalendar(Date date){
        GregorianCalendar gCalendar = new GregorianCalendar();
        gCalendar.setTime(date);
        
        //XMLGregorianCalendar xmlDate = DatatypeFactory.newInstance().newXMLGregorianCalendarDate(gCalendar.get(Calendar.YEAR), gCalendar.get(Calendar.MONTH)+1, gCalendar.get(Calendar.DAY_OF_MONTH), DatatypeConstants.FIELD_UNDEFINED);
        
        
        
        XMLGregorianCalendar xmlCalendar = null;
        try {
            xmlCalendar = DatatypeFactory.newInstance().newXMLGregorianCalendarDate(gCalendar.get(Calendar.YEAR), gCalendar.get(Calendar.MONTH)+1, gCalendar.get(Calendar.DAY_OF_MONTH), DatatypeConstants.FIELD_UNDEFINED);
            System.out.println("xmlcalender :"+xmlCalendar);
        } catch (DatatypeConfigurationException ex) {
            ex.printStackTrace();
        }
        return xmlCalendar;
    }

}
