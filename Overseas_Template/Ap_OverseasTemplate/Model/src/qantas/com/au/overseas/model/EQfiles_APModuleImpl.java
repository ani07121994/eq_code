package qantas.com.au.overseas.model;

import java.io.File;

import java.math.BigDecimal;

import java.util.Date;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboSQLException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import qantas.com.au.overseas.model.common.EQfiles_APModule;
import qantas.com.au.overseas.model.view.eQApproverDetailsImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 25 15:53:09 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EQfiles_APModuleImpl extends ApplicationModuleImpl implements EQfiles_APModule {
    /**
     * This is the default constructor (do not remove).
     */
    public EQfiles_APModuleImpl() {
    }

    /**
     * Container's getter for ApInvoiceOverseasTableEOView1.
     * @return ApInvoiceOverseasTableEOView1
     */
    public ViewObjectImpl getApInvoiceOverseasTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApInvoiceOverseasTableEOView1");
    }

    /**
     * Container's getter for ApOverseasLineitemTableEOView1.
     * @return ApOverseasLineitemTableEOView1
     */
    public ViewObjectImpl getApOverseasLineitemTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApOverseasLineitemTableEOView1");
    }


    public static final String deployment_env = "PROD";
    String  overseas_path ="";
    public String getOverseasPath(){

        if(deployment_env.equals("PSP")){
          overseas_path=  "/u02_psp_soa_ap/DATA/INVOICES/";

        }else if(deployment_env.equals("PROD")){
          overseas_path=  "/u02_prod_soa_ap/DATA/INVOICES/TEMPLATE/QF/";
        }
        else if(deployment_env.equals("SIT")){
                    overseas_path=  "/u02_sa_soadev/Oracle/Middleware/Upload/";
                }
        else if(deployment_env.equals("SITDB")){
                    overseas_path=  "/u02_serv_pl_ap/SOAAPP/DATA/INVOICES/TEMPLATE/";
                }
        else if(deployment_env.equals("DEV")){
                   overseas_path="/u02_soa_dev/Oracle/Middleware/Upload";
               }

       return  overseas_path;
    }

    public void invoiceHeaderLinedataload(){
        System.out.println("inside invoiceHeaderLinedataload");
        ADFContext afcontext =   ADFContext.getCurrent();
        HttpServletRequest req = (HttpServletRequest) afcontext.getEnvironment().getRequest();
        String user = req.getHeader("Proxy-Remote-User")!= null ? req.getHeader("Proxy-Remote-User").toString() : null;
//        String user="171323";
        System.out.println("inside invoiceHeaderLinedataload user details ::"+user);
        System.out.println("Calling the getInvoiceHeaderDetails ");
        System.out.println("Get Remote Address : " + req.getRemoteAddr());
                System.out.println("Get Remote Host : " + req.getRemoteHost());
                System.out.println("Get Query String : " + req.getQueryString());
        //        String groupName=req.getQueryString().split("&")[2];
//                System.out.println("Header Password :"+req.getHeader("Proxy-Remote-Password"));
                String org = req.getQueryString().split("group=")[1].toString().substring(0, 2);
                System.out.println("Org Name : "+org);
                ADFContext.getCurrent().getPageFlowScope().put("ORG", org);
        if(user!=null){
        getInvoiceHeaderDetails(user);
        }else{
            if(org.equalsIgnoreCase("JS")){
                getInvoiceHeaderDetails("662594");
            }else{
        getInvoiceHeaderDetails("176908");
            }
        }

    }




    public void getInvoiceHeaderDetails(String userId) {


      System.out.println("inside getInvoiceHeaderDetails===="+userId);
          String form_status = null;

          ADFContext.getCurrent().getPageFlowScope().put("userId", userId);
          System.out.println("inside getInvoiceHeaderDetails===="+ADFContext.getCurrent().getPageFlowScope().get("userId"));
      RowSetIterator rowSetIterator = null;
      int newLineNumber = 1;
      try{
          ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
          ViewCriteria vc = vo.getViewCriteria("OverseasHeaderItemViewCriteria");
          String bOrg = "Jetstar";
                      if (ADFContext.getCurrent()
                                    .getPageFlowScope()
                                    .get("ORG")
                                    .toString()
                                    .equalsIgnoreCase("JS")) {
                          // 14-12-2022 below ViewCriteria use for Jetstar
                          vc = vo.getViewCriteria("OverseasHeaderItemViewCriteria1");
                      }
          vo.applyViewCriteria(vc);
          vo.setNamedWhereClauseParam("bind_user_id", userId);
          vo.setNamedWhereClauseParam("bind_internalStatus", "NOT_SUBMITTED");
          vo.setNamedWhereClauseParam("bindOrg", bOrg);
//          System.out.println("Load data query : "+vo.getQuery());
          vo.executeQuery();
          //vc.resetCriteria();
          //vo.clearCache();
          /*  ************************************ */
          System.out.println("First on applying criteria OverseasHeaderItemViewCriteria count::"+vo.getEstimatedRangePageCount());
        if(vo.getEstimatedRowCount()>0 ){
              rowSetIterator = vo.createRowSetIterator(null);
              while(rowSetIterator.hasNext()) {
                  System.out.println("------------- am impl  Inside HasNext() of header ------------");

                  Row headerRow = null;
                  headerRow = rowSetIterator.next();
              if (headerRow !=null && (headerRow.getAttribute("InternalStatus")!=null && headerRow.getAttribute("InternalStatus").equals("NOT_SUBMITTED")
                  )) {
                  form_status = "found" ;
                  System.out.println("Loading data of the currently saved form ");
                  System.out.println("***** headerRow.getAttribute(\"SupplierName\") ***** "+headerRow.getAttribute("SupplierName"));
                  System.out.println("***** headerRow.getAttribute(\"CertifierName\") ***** "+headerRow.getAttribute("CertifierName"));
                  System.out.println("***** headerRow.getAttribute(\"UserId\") ***** "+headerRow.getAttribute("UserId"));
                  System.out.println("***** headerRow.getAttribute(\"CertifierEmailAdd\") ***** "+headerRow.getAttribute("CertifierEmailAdd"));
                  System.out.println("***** headerRow.getAttribute(\"SiteId\") ***** "+headerRow.getAttribute("SiteId"));
                  System.out.println("***** headerRow.getAttribute(\"SiteName\") ***** "+headerRow.getAttribute("SiteName"));
                  System.out.println("***** headerRow.getAttribute(\"Attr2\") ***** "+headerRow.getAttribute("Attr2"));
                  System.out.println("***** headerRow.getAttribute(\"InvoiceType\") ***** "+headerRow.getAttribute("InvoiceType"));
                  System.out.println("***** headerRow.getAttribute(\"DocumentType\") ***** "+headerRow.getAttribute("DocumentType"));
                  System.out.println("***** headerRow.getAttribute(\"AlternateApprover\") ***** "+headerRow.getAttribute("AlternateApprover"));
                  System.out.println("***** headerRow.getAttribute(\"invoice id\") ***** "+headerRow.getAttribute("InvoiceId"));
                  System.out.println("***** headerRow.getAttribute(\"OrgId id\") ***** "+headerRow.getAttribute("OrgId"));
                  System.out.println("***** headerRow.getAttribute(\"InvoiceNumber\") ***** "+headerRow.getAttribute("InvoiceNumber"));
                  System.out.println("***** headerRow.getAttribute(\"Attr12\")mpa_flag ***** "+headerRow.getAttribute("Attr12"));
                  System.out.println("***** headerRow.getAttribute(\"Attr13\")pc1 ***** "+headerRow.getAttribute("Attr13"));
                  System.out.println("***** headerRow.getAttribute(\"Attr14\")pc2 ***** "+headerRow.getAttribute("Attr14"));
                  System.out.println("***** headerRow.getAttribute(\"Attr15\")pc3 ***** "+headerRow.getAttribute("Attr15"));


                  ADFContext.getCurrent().getPageFlowScope().put("supName", headerRow.getAttribute("SupplierName"));
                  ADFContext.getCurrent().getPageFlowScope().put("OrgID", headerRow.getAttribute("OrgId"));
                  ADFContext.getCurrent().getPageFlowScope().put("invoiceId", headerRow.getAttribute("InvoiceId"));
                  ADFContext.getCurrent().getPageFlowScope().put("iframeRendered",true);
                  ADFContext.getCurrent().getPageFlowScope().put("certifier_flag", headerRow.getAttribute("Attr17"));
                  ADFContext.getCurrent().getPageFlowScope().put("SupplierPresent", headerRow.getAttribute("SupplierName"));



                  ADFContext.getCurrent().getPageFlowScope().put("natureofEXP_flag",headerRow.getAttribute("Attr11") );
                  ADFContext.getCurrent().getPageFlowScope().put("mpa_flag",headerRow.getAttribute("Attr12"));
                  ADFContext.getCurrent().getPageFlowScope().put("pc1", headerRow.getAttribute("Attr13"));
                  ADFContext.getCurrent().getPageFlowScope().put("pc2", headerRow.getAttribute("Attr14"));
                  ADFContext.getCurrent().getPageFlowScope().put("pc3",headerRow.getAttribute("Attr15"));
                  ADFContext.getCurrent().getPageFlowScope().put("certifier_flag_DB", headerRow.getAttribute("Attr17"));
                  ADFContext.getCurrent().getPageFlowScope().put("supplier_id_value", headerRow.getAttribute("Attr20"));



                  /**Added on 16th jan **/

                      ADFContext.getCurrent().getPageFlowScope().put("CertifierName", headerRow.getAttribute("CertifierName"));
                      ADFContext.getCurrent().getPageFlowScope().put("CertifierEmailAdd",headerRow.getAttribute("CertifierEmailAdd"));
                      ADFContext.getCurrent().getPageFlowScope().put("AlternateApprover", headerRow.getAttribute("AlternateApprover"));
                      ADFContext.getCurrent().getPageFlowScope().put("CertifierApproveComments", headerRow.getAttribute("CertifierApproveComments"));
                  ADFContext.getCurrent().getPageFlowScope().put("CertifierEmployeeNumber", headerRow.getAttribute("EmployeeNumber"));

                  ADFContext.getCurrent().getPageFlowScope().put("approverID_pageLoad", headerRow.getAttribute("AlternateApprvrNo"));

                  ADFContext.getCurrent().getPageFlowScope().put("po_header_no", headerRow.getAttribute("PoNumber"));

                  ADFContext.getCurrent().getPageFlowScope().put("orginal_fileName", headerRow.getAttribute("OriginalFilename"));




                  //File f = new File("/u02_sa_soadev/Oracle/Middleware/Upload/"+userId+"_Invoice_INPROGRESS.pdf"); //to be remove hardcoding

                  //File f = new File("/u03/PSP/SOA/"+userId+"_Invoice_INPROGRESS.pdf"); //to be remove hardcoding
                  //File f = new File("/u02_psp_soa_ap/DATA/INVOICES/"+userId+"_Invoice_INPROGRESS.pdf"); //to be remove hardcoding

                  File f = new File(getOverseasPath()+userId+"_Invoice_INPROGRESS.pdf");

                  if(f.exists() && !f.isDirectory()) {

                  ADFContext.getCurrent().getPageFlowScope().put("file_name",userId+"_Invoice_INPROGRESS.pdf");   //194901_Invoice_INPROGRESS.pdf

                  /*added on 27th aug*/
                  //ADFContext.getCurrent().getPageFlowScope().put("certifierFlagInScope","0");

                  }
                  vo.setCurrentRow(headerRow);


                  break;
              }
               form_status = "not_found" ;
           }
          }

          if(form_status == null || (form_status!=null && form_status.equals("not_found")) ){
         System.out.println("Creating a new form header fields ");


         // createHeaderRow(userId);
         ViewObject headerVO= getApInvoiceOverseasTableEOView1();
          Row row = headerVO.createRow();

          //row.setAttribute("isSelected", "N");
          SequenceImpl sequenceImpl=new SequenceImpl("INVOICE_SEQ",getDBTransaction());
          row.setAttribute("InvoiceId", new DBSequence(sequenceImpl.getSequenceNumber()));
          row.setAttribute("UserId", userId);
          row.setAttribute("SupplierName", null);
          row.setAttribute("CertifierName", null);
          row.setAttribute("EmployeeNumber", userId);
          row.setAttribute("CertifierEmailAdd", null);
          row.setAttribute("SiteId", "");
          row.setAttribute("SiteName", "");
          row.setAttribute("InvoiceType", "Non PO Invoice");
          row.setAttribute("DocumentType", "Invoice");
          row.setAttribute("AlternateApprover", null);
          row.setAttribute("OrgId", null);
          row.setAttribute("InternalStatus", "NOT_SUBMITTED");
          row.setAttribute("InvoiceNumber", "");



          //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
          headerVO.insertRow(row);
          headerVO.setCurrentRow(row);
          //getTransaction().commit();
          ADFContext.getCurrent().getPageFlowScope().put("invoiceId", row.getAttribute("InvoiceId"));

          ADFContext.getCurrent().getPageFlowScope().put("iframeRendered",false);


             /* ViewObjectImpl vo2 = getOverseasHeaderItemView1();
              ViewCriteria vc2 = vo1.getViewCriteria("OverseasHeaderItemViewCriteria");
              vo2.applyViewCriteria(vc1);
              vo2.setNamedWhereClauseParam("bind_user_id", userId);
              vo2.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
              vo2.executeQuery();*/

           //Creating an emptyLine
           System.out.println("Creating a new line  ");
          addLineItemRow( ADFContext.getCurrent().getPageFlowScope().get("invoiceId")!=null ? ADFContext.getCurrent().getPageFlowScope().get("invoiceId").toString() : null);

          getDBTransaction().commit();
           //Creating an emptyLine


          }

          /*retrieving the line items*/

          ViewObjectImpl vo1 =getApOverseasLineitemTableEOView1();
          //ViewCriteria vc1 = vo1.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");

          System.out.println("getInvoiceHeaderDetails :: Invoice Id :"+ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          vo1.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          //vo1.applyViewCriteria(vc1);
          //vo1.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));

          vo1.executeQuery();
          //vc1.resetCriteria();
          //vo1.clearCache();
          System.out.println("Second ApOverseasLineitemTableEOViewCriteria count :: "+vo1.getEstimatedRowCount());
          //System.out.println("After setting the current row::"+vo.getEstimatedRowCount());*/


          /*retrieving the overseas templates for the given user*/

          ViewObjectImpl template_vo =getApOverseasTemplateTableEOView1();
          ViewCriteria vc1 = template_vo.getViewCriteria("ApOverseasTemplateTableEOViewCriteria");
                      String bindOrg = "Jetstar";
                      if (ADFContext.getCurrent()
                                    .getPageFlowScope()
                                    .get("ORG")
                                    .toString()
                                    .equalsIgnoreCase("JS")) {
                          // 14-12-2022 below ViewCriteria use for Jetstar
                          vc1 = template_vo.getViewCriteria("ApOverseasTemplateTableEOViewCriteria1");
                      }
                      template_vo.applyViewCriteria(vc1);
          template_vo.setNamedWhereClauseParam("bindOrg", bindOrg);
          template_vo.setNamedWhereClauseParam("bind_userId", userId);
//          System.out.println("Template IMPL query :"+template_vo.getQuery());
          template_vo.executeQuery();
          System.out.println("Total template count for the user :: "+template_vo.getEstimatedRowCount());

          //added on 21st of July 2020 ot76
//          ApplicationModule am = null;
//          String amDef = "model.EBS_AM";
//          String config = "LOCAL";
//          am = Configuration.createRootApplicationModule(amDef, config);
//          EBS_AMImpl amImpl = (EBS_AMImpl)am;
//          RowSetIterator empRSIter=null;
//          ViewObjectImpl PoNonPoVO =getSitesVO1();
//          ViewCriteria vc2 = PoNonPoVO.getViewCriteria("SitesVOCriteria");
//          PoNonPoVO.applyViewCriteria(vc2);
//          System.out.println(ADFContext.getCurrent().getPageFlowScope().get("supName").toString());
//          PoNonPoVO.setNamedWhereClauseParam("bindVendorName", ADFContext.getCurrent().getPageFlowScope().get("supName").toString());
//          PoNonPoVO.executeQuery();
//          PoNonPoVO.next();
//          String selectedSupplierName= PoNonPoVO.getCurrentRow().getAttribute("NoPoNoPayFlag")!= null ? PoNonPoVO.getCurrentRow().getAttribute("NoPoNoPayFlag").toString(): "N";
//          System.out.println(selectedSupplierName);
//          ADFContext.getCurrent().getPageFlowScope().put("PoNonPo", selectedSupplierName);




      } catch (JboSQLException e) {
          e.printStackTrace();
      } catch (Exception e) {
          e.printStackTrace();
          }finally{
          if(rowSetIterator!=null){
              rowSetIterator.closeRowSetIterator();
          }

          }
      System.out.println("End: getInvoiceHeaderDetails()" +ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          //onAddTemplateRow("194901");

      }

    public void onAddTemplateRow(String userId){
        System.out.println(" onAddTemplateRow ");
        // createHeaderRow(userId);
        ViewObject templateVO= getApOverseasTemplateTableEOView1();
         Row row = templateVO.createRow();

         //row.setAttribute("isSelected", "N");
        SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());
        row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));
        row.setAttribute("UserId", userId);
        row.setAttribute("SupplierName", null);
        row.setAttribute("TaxRegNumber", null);
        row.setAttribute("SupplierNumber", null);
        row.setAttribute("SiteId", null);
        row.setAttribute("SiteName", null);
        row.setAttribute("InvoiceType", null);
        row.setAttribute("DocumentType", null);
        row.setAttribute("OperatingUnit", null);

         //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
         templateVO.insertRow(row);
         templateVO.setCurrentRow(row);
         //getTransaction().commit();

    }
    /*tTemplateDocNAme.setValue(docTypeSoc.getValue());
            itTemplateInvType.setValue(invoiceTypeSoc.getValue());
            itTemplateSuppName.setValue(supNameIt.getValue());
            itTemplateSuppNo.setValue(suppNumIt.getValue());
            itTemplateSiteId.setValue(siteIdIt.getValue());
            itTemplateOpUnit.setValue(operatingUnitIt.getValue());
            itTemplateTaxRegNo.setValue(taxRegIt.getValue());
            itTemplateSiteName.setValue(siteNameIt.getValue());*/

        public void saveTemplate(String userId,String supName,String suppNum,String siteId,String operatingUnit,String taxReg,String invoiceType,String docType,String templateName
                                 ,String orgId,String siteName){
            ViewObject templateVO= getApOverseasTemplateTableEOView1();
             Row row = templateVO.createRow();

             //row.setAttribute("isSelected", "N");
            SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());
            row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));
            //row.setAttribute("UserId", "194901");
            row.setAttribute("UserId", userId);
            row.setAttribute("SupplierName", supName);
            row.setAttribute("TaxRegNumber", taxReg);
            row.setAttribute("SupplierNumber", suppNum);
            row.setAttribute("SiteId", siteId);
            row.setAttribute("SiteName", null);
            row.setAttribute("InvoiceType", invoiceType);
            row.setAttribute("DocumentType", docType);
            row.setAttribute("OperatingUnit", operatingUnit);
            row.setAttribute("TemplateName", templateName);
            row.setAttribute("OrgId", orgId);
            row.setAttribute("SiteName", siteName);

             //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
             templateVO.insertRow(row);
             templateVO.setCurrentRow(row);
            System.out.println("Save Template :"+templateVO.getQuery());
             getTransaction().commit();

        }

    public void onAddTemplateRow_new(String userId){

        System.out.println("Start: addLineItemRow template new()");
        RowSetIterator maxIdVORowSetIterator = null;
        int newLineNumber = 1;
        try{
        ViewObjectImpl vo =getApOverseasTemplateTableEOView1();
        /* ViewCriteria vc = vo.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);
        vo.executeQuery();*/
        System.out.println("ViewObjectImpl :: "+vo.getEstimatedRowCount());

        /*  ************************************ */
        Row selectedRow=vo.last();
        System.out.println("selectedRow :: "+selectedRow);

        /* ************************************** */

        int lastRowIndex = vo.getRangeIndexOf(vo.last());
        System.out.println("last row index :: "+ lastRowIndex);

        System.out.println("Before creating row count::"+vo.getEstimatedRowCount() +"newLineNumber ::"+newLineNumber);
        // Row row = vo.createRow();

        NameValuePairs row = new NameValuePairs();
        //row.setNewRowState(Row.STATUS_INITIALIZED);
            SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());
            row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));
            row.setAttribute("UserId", userId);
            row.setAttribute("SupplierName", null);
            row.setAttribute("TaxRegNumber", null);
            row.setAttribute("SupplierNumber", null);
            row.setAttribute("SiteId", null);
            row.setAttribute("SiteName", null);
            row.setAttribute("InvoiceType", null);
            row.setAttribute("DocumentType", null);
            row.setAttribute("OperatingUnit", null);

        System.out.println("Before creating row count::"+vo.getEstimatedRowCount());

        vo.insertRowAtRangeIndex(lastRowIndex+1,vo.createAndInitRow(row));


        System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
        } catch (JboSQLException e) {

        e.printStackTrace();
        } catch (Exception e) {

        e.printStackTrace();
        }
        System.out.println("End: addLineItemRow()");
        }





    public void addLineItemRow_14th(String invoiceId) {
    System.out.println("Start: addLineItemRow()");
        SequenceImpl seq = new SequenceImpl("LINE_ID_SEQ", getDBTransaction());
        Number seqNextval = seq.getSequenceNumber();
        String seqVal = seqNextval.toString();
        System.out.println("Start: addLineItemRow()");
    RowSetIterator maxIdVORowSetIterator = null;
    int newLineNumber = 1;
    try{


    //        ystem.out.println("defaultWHTCode in addLineItemRow"+ADFContext.getCurrent().getPageFlowScope().get("defaultWHTCode"));
    //        System.out.println("WHTReqdFlag in addLineItemRow"+ADFContext.getCurrent().getPageFlowScope().get("WHTReqdFlag").);
        ViewObjectImpl vo = getApOverseasLineitemTableEOView1();
        /*  ************************************ */
        Row selectedRow=vo.last();
        System.out.println("selectedRow :: "+selectedRow);
           if (selectedRow!=null){
               System.out.println("LineNumber :"+selectedRow.getAttribute("LineNumber"));
               if (selectedRow.getAttribute("LineNumber")!=null){
                   newLineNumber = Integer.parseInt(selectedRow.getAttribute("LineNumber").toString());
                   newLineNumber++;
               }
            }

        /* ************************************** */

        int lastRowIndex = vo.getRangeIndexOf(vo.last());
        System.out.println("last row index :: "+ lastRowIndex);
    //        Random randomGenerator = new Random();
    //        int randomInt = randomGenerator.nextInt(1000);
    //        System.out.println("randomInt>>"+ randomInt);
        Row row = vo.createRow();





    row.setAttribute("InvoiceId", invoiceId);
    row.setAttribute("LineNumber", newLineNumber);
    row.setAttribute("LinePoNum", "");
    row.setAttribute("PoLineNum", null);
    row.setAttribute("LineDescription", "");
    row.setAttribute("Quantity", null);
    row.setAttribute("Uom", null);
    row.setAttribute("UnitPrice", null);
    row.setAttribute("LineTotalAmount", null);
    row.setAttribute("TaxRate", null);
    row.setAttribute("TaxRateCode", null);
    row.setAttribute("TaxAmountLineitem", null);
    row.setAttribute("Attr9", seqVal);

        vo.insertRowAtRangeIndex(lastRowIndex+1, row);

        System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
    //            getDBTransaction().commit();
    } catch (JboSQLException e) {
    //            getDBTransaction().rollback();
        e.printStackTrace();
    } catch (Exception e) {
    //            getDBTransaction().rollback();
        e.printStackTrace();
    }
    System.out.println("End: addLineItemRow()");
    }




    public void addLineItemRow(String invoiceId){ {
            SequenceImpl seq = new SequenceImpl("LINE_ID_SEQ", getDBTransaction());
            Number seqNextval = seq.getSequenceNumber();
            String seqVal = seqNextval.toString();
        System.out.println("Start: addLineItemRow()");
        RowSetIterator maxIdVORowSetIterator = null;
        int newLineNumber = 1;
        try{
            ViewObjectImpl vo =getApOverseasLineitemTableEOView1();
           /* ViewCriteria vc = vo.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);
            vo.executeQuery();*/
            System.out.println("ViewObjectImpl :: "+vo.getEstimatedRowCount());

            /*  ************************************ */
            Row selectedRow=vo.last();
            System.out.println("selectedRow :: "+selectedRow);
               if (selectedRow!=null){
                   System.out.println("LineNumber :"+selectedRow.getAttribute("LineNumber"));
                   if (selectedRow.getAttribute("LineNumber")!=null){
                       newLineNumber = Integer.parseInt(selectedRow.getAttribute("LineNumber").toString());
                       newLineNumber++;
                   }
                }

            /* ************************************** */

            int lastRowIndex = vo.getRangeIndexOf(vo.last());
            System.out.println("last row index :: "+ lastRowIndex);

            System.out.println("Before creating row count::"+vo.getEstimatedRowCount() +"newLineNumber ::"+newLineNumber);
           // Row row = vo.createRow();

            NameValuePairs nvp = new NameValuePairs();
            //row.setNewRowState(Row.STATUS_INITIALIZED);
            nvp.setAttribute("InvoiceId", invoiceId);
            nvp.setAttribute("LineNumber", newLineNumber);
            nvp.setAttribute("LinePoNum", "");
            nvp.setAttribute("PoLineNum", null);
            nvp.setAttribute("LineDescription", "");
            nvp.setAttribute("Quantity", null);
            nvp.setAttribute("Uom", null);
            nvp.setAttribute("UnitPrice", null);
            nvp.setAttribute("LineTotalAmount", null);
            nvp.setAttribute("TaxRate", null);
            nvp.setAttribute("TaxRateCode", null);
            nvp.setAttribute("TaxAmountLineitem", null);
            nvp.setAttribute("Attr9", seqVal);
    //        row.setAttribute("Attr10", null);
           //vo.createAndInitRow(nvp);
            //row.setNewRowState(Row.STATUS_NEW);
    //        vo.clearCache();
           System.out.println("Before creating row count::"+vo.getEstimatedRowCount());
           // vo.insertRowAtRangeIndex(lastRowIndex+1, row);
           vo.insertRowAtRangeIndex(lastRowIndex+1,vo.createAndInitRow(nvp));


            System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
        //            getDBTransaction().commit();
        } catch (JboSQLException e) {
        //            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
        //            getDBTransaction().rollback();
            e.printStackTrace();
        }
        System.out.println("End: addLineItemRow()");
        }
    }

    public void saveAllFormDetails(String invoiceId,String siteId,String supName,String currency,String employeeNo){
         System.out.println(invoiceId +"-Start saveAllFormDetails------employeeNo---------"+"-------------"+"getApOverseasLineitemTableEOView1()1 estimated row count ::"+getApOverseasLineitemTableEOView1().getEstimatedRowCount());
        System.out.println(invoiceId+"---saveAllFormDetails-----------"+"getOverseasHeaderItemView1() estimated row count ::"+getApInvoiceOverseasTableEOView1().getEstimatedRowCount());

                RowSetIterator rowSetIterator = null;
                ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
               /* ViewCriteria vc = vo.getViewCriteria("OverseasHeaderItemViewCriteria");
                vo.applyViewCriteria(vc);
                System.out.println("kjkjkj");
                vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);
                vo.setNamedWhereClauseParam("bind_user_id", employeeNo);
                vo.executeQuery();
                vc.resetCriteria();
                vo.clearCache();
                System.out.println("kjkjkj");*/
                System.out.println(invoiceId+"getOverseasHeaderItemView1() estimated row count ::"+getApInvoiceOverseasTableEOView1().getEstimatedRowCount());

                if(vo.getEstimatedRowCount()>0 ){
                      rowSetIterator = vo.createRowSetIterator(null);
                      while(rowSetIterator.hasNext()) {
                          Row headerRow = null;
                          headerRow = rowSetIterator.next();

                          System.out.println(invoiceId+"***** headerRow.getAttribute(\"SupplierName\") ***** "+headerRow.getAttribute("SupplierName"));
                          System.out.println(invoiceId+"***** headerRow.getAttribute(\"CertifierName\") ***** "+headerRow.getAttribute("CertifierName"));
                          System.out.println(invoiceId+"***** headerRow.getAttribute(\"EmployeeNumber\") ***** "+headerRow.getAttribute("EmployeeNumber"));
                          System.out.println(invoiceId+"***** headerRow.getAttribute(\"CertifierEmailAdd\") ***** "+headerRow.getAttribute("CertifierEmailAdd"));
                          System.out.println(invoiceId+"***** headerRow.getAttribute(\"InvoiceId\") ***** "+headerRow.getAttribute("InvoiceId") );
                          System.out.println(invoiceId+"***** certifier_flag_DB ***** "+ADFContext.getCurrent().getPageFlowScope().get("certifier_flag_DB"));
                          System.out.println(invoiceId+"***** currency mapped to certifier flag ***** "+currency);
                          System.out.println(invoiceId+"***** Attr4 headerRow ***** "+headerRow.getAttribute("Attr4"));
                          System.out.println(invoiceId+"***** Attr3 headerRow ***** "+headerRow.getAttribute("Attr3"));
                          //923018
                          System.out.println(invoiceId+"***** mpa_flag headerRow ***** "+ADFContext.getCurrent().getPageFlowScope().get("mpa_flag"));
                          System.out.println(invoiceId+"***** pc1 FlowScope ***** "+ADFContext.getCurrent().getPageFlowScope().get("pc1"));
                          System.out.println(invoiceId+"***** pc2 FlowScope ***** "+ADFContext.getCurrent().getPageFlowScope().get("pc2"));
                          System.out.println(invoiceId+"***** pc3 FlowScope ***** "+ADFContext.getCurrent().getPageFlowScope().get("pc3"));

                          headerRow.setAttribute("OrgId",siteId);
                          headerRow.setAttribute("Attr11",ADFContext.getCurrent().getPageFlowScope().get("natureofEXP_flag"));
                          headerRow.setAttribute("Attr12",ADFContext.getCurrent().getPageFlowScope().get("mpa_flag"));
                          headerRow.setAttribute("Attr13",ADFContext.getCurrent().getPageFlowScope().get("pc1"));
                          headerRow.setAttribute("Attr14",ADFContext.getCurrent().getPageFlowScope().get("pc2"));
                          headerRow.setAttribute("Attr15",ADFContext.getCurrent().getPageFlowScope().get("pc3"));
                          //headerRow.setAttribute("Attr17",ADFContext.getCurrent().getPageFlowScope().get("certifier_flag_DB"));
                          headerRow.setAttribute("Attr17",currency);
                          headerRow.setAttribute("Attr20",ADFContext.getCurrent().getPageFlowScope().get("supplier_id_value"));

                          //headerRow.setAttribute("Attr20",ADFContext.getCurrent().getPageFlowScope().get("supplier_id_value"));
                          if(ADFContext.getCurrent().getPageFlowScope().get("orginal_fileName")!=null){
                          headerRow.setAttribute("OriginalFilename",ADFContext.getCurrent().getPageFlowScope().get("orginal_fileName"));
                          }

                          if( ADFContext.getCurrent().getPageFlowScope().get("Submit")!=null && ADFContext.getCurrent().getPageFlowScope().get("Submit").toString().equals("true") ) {

                             // headerRow.setAttribute("internal_status", "SUBMITTED");

                             headerRow.setAttribute("InternalStatus", "SUBMITTED");
                              //923018- Added to keep the date at the time of submission in DB-Start
                              java.sql.Timestamp date = new java.sql.Timestamp(new java.util.Date().getTime());
                             headerRow.setAttribute("ModifiedOn", date);
                              //923018- Added to keep the date at the time of submission in DB- End
                          }

                          if(ADFContext.getCurrent().getPageFlowScope().get("approverID")!=null) {

                             // headerRow.setAttribute("internal_status", "SUBMITTED");
                              System.out.println(invoiceId+"Saving alternate approverrrrrrrrrrrrrr no");
                             headerRow.setAttribute("AlternateApprvrNo", ADFContext.getCurrent().getPageFlowScope().get("approverID"));
                          }



                         /* headerRow.setAttribute("SiteId", siteId);
                          headerRow.setAttribute("SupplierName", supName);
                          headerRow.setAttribute("CurrencyCode", currency);
                          headerRow.setAttribute("EmployeeNumber", employeeNo);*/
                      }
                }

                RowSetIterator rowSetIterator1 = null;
                ViewObjectImpl vo1 = getApOverseasLineitemTableEOView1();
                if(vo1.getEstimatedRowCount() > 0){


                    rowSetIterator1 = vo1.createRowSetIterator(null);
                    while(rowSetIterator1.hasNext()) {
                    Row headerRow = null;
                    headerRow = rowSetIterator1.next();
                    headerRow.setAttribute("Attr11","null");
                    System.out.println(invoiceId+"***** Attr4 Line ***** "+headerRow.getAttribute("Attr4"));
                    System.out.println(invoiceId+"***** Attr3 Line ***** "+headerRow.getAttribute("Attr3"));
                    System.out.println(invoiceId+"***** ProjectidLine Line ***** "+headerRow.getAttribute("ProjectidLine"));

                        //currency mapped against certifier check box (added on 24th -Oct)
                        if(currency.equals("false")){
                            headerRow.setAttribute("GlNo", "");
                            headerRow.setAttribute("TaskNo", "");
                            headerRow.setAttribute("ExpinditureOrg", "");
                            headerRow.setAttribute("ProjectNo", "");
                            headerRow.setAttribute("ExpenditureDate", "");
                            headerRow.setAttribute("Attr10", "");
                            headerRow.setAttribute("Attr5", ""); //rec code flag


                        }else if(currency.equals("true")){
                            //remove all PO line fields
                            headerRow.setAttribute("PoLineNum", "");
                            headerRow.setAttribute("LinePoNum", "");




                        }
                    }

                }



      getDBTransaction().commit();
      //getApOverseasLineitemTableEOView1().getDBTransaction().commit();
      //getOverseasHeaderItemView1().getDBTransaction().commit();
    }

    public void saveAPOperationDetails(Boolean flag,String invoiceId, String supName,String siteId,String invNum,String taxRegNum,
                                String poNum,String lineTotal,String certName,String currency,
                                String invDate,String taxTotal,String headerTotal,String certEmail,
                                String rejReason,String comments,String certComments,
                                String reason,String type,String status,
                                String docType,String invoiceType,String operatingUnit,String invalidReasonType,String invalidReason,String employeeNo) {
        System.out.println("Start: saveAPOperationDetails()");
        System.out.println("-------------invoiceId: "+invoiceId);
        System.out.println("-------------supName: "+supName);
        System.out.println("-------------siteId: "+siteId);
        System.out.println("-------------invNum: "+invNum);
        System.out.println("-------------taxRegNum: "+taxRegNum);
        System.out.println("-------------poNum: "+poNum);
        System.out.println("-------------lineTotal: "+lineTotal);

        System.out.println("-------------headerTotal: "+headerTotal);
        System.out.println("-------------taxTotal: "+taxTotal);

        System.out.println("-------------certName: "+certName);
        System.out.println("-------------currency: "+currency);
        System.out.println("-------------reason: "+reason);
        System.out.println("-------------type: "+type);
        System.out.println("--------------InvalidReasonType; "+invalidReasonType);
        System.out.println("--------------InvalidReason: "+invalidReason);
        System.out.println("--------------Employee No: "+employeeNo);
      //  String invalidReasonType = (String)AdfFacesContext.getCurrentInstance().getPageFlowScope().get("invalidReasonType");
        RowSetIterator rowSetIterator = null;
        RowSetIterator rsi= null;
        RowSetIterator rowIt= null;
        try{
            ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();
            if(vo.getEstimatedRowCount() > 0){
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    System.out.println("-------------Inside HasNext()------------");
                    Row row = rowSetIterator.next();
                    if (null != row) {
                        System.out.println("-------------supName: "+supName);
                        row.setAttribute("SiteId", siteId);
                        row.setAttribute("SupplierName", supName);


                        //Populate SupplierId
                        ApplicationModule am = null;
                        try {
                            String amDef = "model.EbsAM";
                            String config = "EbsAMLocal";
                            am = Configuration.createRootApplicationModule(amDef, config);
                            EBS_AMImpl amImpl = (EBS_AMImpl)am;
                            ViewObjectImpl suppNameVO = amImpl.getSitesVO1();
                            ViewCriteria viewCrit = suppNameVO.getViewCriteria("SitesVOCriteriaSupNameSiteID");
                            suppNameVO.applyViewCriteria(viewCrit);
                            suppNameVO.setNamedWhereClauseParam("bindVendorName", supName);
                            suppNameVO.setNamedWhereClauseParam("bvSiteID", siteId);
                            suppNameVO.setNamedWhereClauseParam("bindOrg", (String)ADFContext.getCurrent().getPageFlowScope().get("ORG"));
//                                                        System.out.println("Query --- "+suppNameVO.getQuery());
                            suppNameVO.executeQuery();




                            if(suppNameVO.getEstimatedRowCount()>0) {
                                System.out.println("--- Match found for Supplier Name : "+suppNameVO.getEstimatedRowCount()+" records.");
                                 rowIt = suppNameVO.createRowSetIterator(null);
                                while(rowIt.hasNext()) {
                                    Row rowData = rowIt.next();
                                    try {
                                        System.out.println("--- Matched Supplier Number : "+rowData.getAttribute("VendorNumber"));
                                        BigDecimal  vendorId = rowData.getAttribute("VendorId") == null ? null : (BigDecimal)rowData.getAttribute("VendorId");
                                        BigDecimal  orgId = rowData.getAttribute("OrgId") == null ? null : (BigDecimal)rowData.getAttribute("OrgId");
    //                                        System.out.println("vendorId****"+vendorId);
    //                                        System.out.println("orgId****"+orgId);

                                        row.setAttribute("SupplierId",  vendorId == null ? null : vendorId.intValue()+"");
                                        row.setAttribute("OrgId",       orgId == null ? null : orgId.intValue()+"");
                                    } catch(Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } catch(Exception ex) {
                        ex.printStackTrace();
                        } finally {
                            if(am!=null) {
                                Configuration.releaseRootApplicationModule(am, false);
                            }
                        }

                        row.setAttribute("InvoiceNumber", invNum);
                        row.setAttribute("TaxRegNumber", taxRegNum);
                        row.setAttribute("PoNumber", poNum);
                        row.setAttribute("Attr1", lineTotal);
                        row.setAttribute("CertifierName", certName);
                        row.setAttribute("CurrencyCode", currency);
                        row.setAttribute("InvoiceDate", invDate);
                        row.setAttribute("TaxAmount", taxTotal);
                        row.setAttribute("InvoiceTotAmount", headerTotal);
                        row.setAttribute("CertifierEmailAdd", certEmail);
                        row.setAttribute("EmployeeNumber", employeeNo);
                        System.out.println("updated Employee No"+row.getAttribute("EmployeeNumber"));
                        row.setAttribute("ApOperationComments", comments);
                        row.setAttribute("CertifierRejReason", rejReason);
                        row.setAttribute("CertifierRejComments", certComments);

                        row.setAttribute("InvalidCode", reason);
                        row.setAttribute("InvalidReasonTypeId", type);

                        //TO-DO : To be changed the quick-fix
                        if(row.getAttribute("InvalidCode")!=null && (!row.getAttribute("InvalidCode").toString().equals("16") && !row.getAttribute("InvalidCode").toString().equals("20"))) {
                            System.out.println("setting InvalidReason and InvalidReasonType as NONE");
                            row.setAttribute("InvalidReason", "NONE");
                            row.setAttribute("InvalidReasonType", "NONE");
                        } else {
                            row.setAttribute("InvalidReason", invalidReason);
                            System.out.println(" After saving reason"+invalidReason);
                            row.setAttribute("InvalidReasonType", invalidReasonType);
                            System.out.println(" After saving reasontype"+invalidReasonType);
                        }

    //                  row.setAttribute("InvalidReason", invalidReason);
    //                  System.out.println(" After saving reason"+invalidReason);
    //                  row.setAttribute("InvalidReasonType", invalidReasonType);
    //                        System.out.println(" After saving reasontype"+invalidReasonType);

                        row.setAttribute("Status", status);
                        row.setAttribute("DocumentType", docType);
                        row.setAttribute("InvoiceType", invoiceType);
                        row.setAttribute("Attr2", operatingUnit);

                       // java.util.Date utilDate = new java.util.Date();
                       // java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                        System.out.println("saveap operation");
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate());
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF");
                        System.out.println("ModifiedBy ADF");
                        row.setAttribute("Attr9", flag==true?"From_ADF_APOps_Submit":"From_ADF_APOps_Save");

                        System.out.println("Attr9 is from_adf");


                        System.out.println("===== AP OPS Save/Submit Operation ====="+new Date());
                        System.out.println(
                            "flag:"+flag+", "+
                            "invoiceId:"+invoiceId+", "+
                            "supName:"+supName+", "+
                            "siteId:"+siteId+", "+
                            "invNum:"+invNum+", "+
                            "taxRegNum:"+taxRegNum+", "+
                            "poNum:"+poNum+", "+
                            "lineTotal:"+lineTotal+", "+
                            "certName:"+certName+", "+
                            "currency:"+currency+", "+
                            "invDate:"+invDate+", "+
                            "taxTotal:"+taxTotal+", "+
                            "headerTotal:"+headerTotal+", "+
                            "certEmail:"+certEmail+", "+
                            "rejReason:"+rejReason+", "+
                            "comments:"+comments+", "+
                            "certComments:"+certComments+", "+
                            "reason:"+reason+", "+
                            "type:"+type+", "+
                            "status:"+status+", "+
                            "docType:"+docType+", "+
                            "invoiceType:"+invoiceType+", "+
                            "operatingUnit:"+operatingUnit+", "+
                            "invalidReasonType:"+invalidReasonType+", "+
                            "invalidReason:"+invalidReason+" , employee no "+employeeNo
                        );
                    }

                }
            }


           //Tax rate ----

           HashMap<String, BigDecimal> taxRatesMasterList = executeTaxRateCodeResultSet();

            ViewObjectImpl lineItems = getApOverseasLineitemTableEOView1();
            ViewCriteria lineItemsVc = lineItems.getViewCriteria("LineItemDetailsEOViewCriteria");
            lineItems.applyViewCriteria(lineItemsVc);
            lineItems.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            lineItems.executeQuery();
            System.out.println("-------------Line Item Rows: "+lineItems.getEstimatedRowCount());

             rsi = lineItems.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row lineItem = rsi.next();
                String taxRateCode = (lineItem.getAttribute("TaxRateCode")==null) ? null : (String)lineItem.getAttribute("TaxRateCode");
                //oracle.jbo.domain.Number taxRate = (lineItem.getAttribute("TaxRate")==null) ? null : (oracle.jbo.domain.Number)lineItem.getAttribute("TaxRate");
                System.out.println("TaxRateCode in LineItem ::: "+taxRateCode);
                if(taxRateCode!=null) {
                    BigDecimal taxRateFromMasterList = taxRatesMasterList.get(taxRateCode);
                    System.out.println("taxRateFromMasterList ::: "+taxRateFromMasterList);
                    if(taxRateFromMasterList!=null) {
                        oracle.jbo.domain.Number taxRate = new oracle.jbo.domain.Number(taxRateFromMasterList.doubleValue());
                        System.out.println("Final tax rate ::: "+ taxRate);
                        lineItem.setAttribute("TaxRate", taxRate);
                    }
                    else{
                        lineItem.setAttribute("TaxRateCode", null);
                        lineItem.setAttribute("TaxRate", null);
                    }
                }
            }


            getDBTransaction().commit();
            System.out.println("-------------Commited------------");

           // executeHeaderLineItemDetails(invoiceId); commented on 24th august
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
                if(rowSetIterator!=null) {
                    try {
                        rowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();

                }
                }
            if(rowIt!=null) {
                try {
                    rowIt.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();

            }
            }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();

            }
            }

        }
        System.out.println("End: saveAPOperationDetails()");
    }


    public HashMap<String, BigDecimal> executeTaxRateCodeResultSet() {
        HashMap<String, BigDecimal> retmap = new HashMap<String, BigDecimal>();
        ApplicationModule am = null;
        RowSetIterator rsi = null;
        try {
            String amDef = "model.EbsAM";
            String config = "EbsAMLocal";
            am = Configuration.createRootApplicationModule(amDef, config);
            EBS_AMImpl amImpl = (EBS_AMImpl)am;
            ViewObjectImpl taxRateCodeMasterListVO1 = amImpl.getTaxRateCodeMasterListVO1();
            System.out.println("-----executeTaxRateCodeResultSet-----");
            taxRateCodeMasterListVO1.executeQuery();

            if(taxRateCodeMasterListVO1.getEstimatedRowCount()>0){
                rsi = taxRateCodeMasterListVO1.createRowSetIterator(null);
               while (rsi.hasNext()) {
                   Row taxRow = rsi.next();
                   //System.out.println("PercentageRate ::"+taxRow.getAttribute("PercentageRate"));
                   // Add your logic here if condition
                   BigDecimal taxRate = (BigDecimal)taxRow.getAttribute("PercentageRate");
                   String taxRateCode=taxRow.getAttribute("TaxRateCode").toString();
                   System.out.println("key taxRateCode ::: "+taxRateCode + " value taxRate ::: "+ taxRate);
                   retmap.put(taxRateCode, taxRate);
               }
            }
        } catch(Exception ex) {
           ex.printStackTrace();
        } finally {
           if(am!=null) {
               Configuration.releaseRootApplicationModule(am, false);
           }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();

            }
            }
        }
        return retmap;
    }

    /**
     * Container's getter for ApOverseasTemplateTableEOView1.
     * @return ApOverseasTemplateTableEOView1
     */
    public ViewObjectImpl getApOverseasTemplateTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApOverseasTemplateTableEOView1");
    }


    /**
     * Container's getter for DuplicateRecordCheckVO1_1.
     * @return DuplicateRecordCheckVO1_1
     */
    public ViewObjectImpl getDuplicateRecordCheckVO1() {
        return (ViewObjectImpl)findViewObject("DuplicateRecordCheckVO1");
    }

    /**
     * Container's getter for DuplicateInvoiceExclusionStatusListVO1Iterator1.
     * @return DuplicateInvoiceExclusionStatusListVO1Iterator1
     */
    public ViewObjectImpl getDuplicateInvoiceExclusionStatusListVO1Iterator1() {
        return (ViewObjectImpl)findViewObject("DuplicateInvoiceExclusionStatusListVO1Iterator1");
    }

    /**
     * Container's getter for eQApproverDetails1.
     * @return eQApproverDetails1
     */
    public eQApproverDetailsImpl geteQApproverDetails1() {
        return (eQApproverDetailsImpl)findViewObject("eQApproverDetails1");
    }

    /**
     * Container's getter for overseas_dup_chk_VO1.
     * @return overseas_dup_chk_VO1
     */
    public ViewObjectImpl getoverseas_dup_chk_VO1() {
        return (ViewObjectImpl)findViewObject("overseas_dup_chk_VO1");
    }

    /**
     * Container's getter for SitesVO1.
     * @return SitesVO1
     */
    public ViewObjectImpl getSitesVO1() {
        return (ViewObjectImpl)findViewObject("SitesVO1");
    }
}
