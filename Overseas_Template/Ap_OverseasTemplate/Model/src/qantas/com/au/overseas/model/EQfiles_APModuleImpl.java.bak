package qantas.com.au.overseas.model;

import java.io.File;

import java.math.BigDecimal;

import java.util.Date;
import java.util.HashMap;

import javax.servlet.http.HttpServletRequest;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;

import oracle.binding.BindingContainer;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboSQLException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import qantas.com.au.overseas.model.common.EQfiles_APModule;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 25 15:53:09 IST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EQfiles_APModuleImpl extends ApplicationModuleImpl implements EQfiles_APModule {
    /**
     * This is the default constructor (do not remove).
     */
    public EQfiles_APModuleImpl() {
    }

    /**
     * Container's getter for ApInvoiceOverseasTableEOView1.
     * @return ApInvoiceOverseasTableEOView1
     */
    public ViewObjectImpl getApInvoiceOverseasTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApInvoiceOverseasTableEOView1");
    }

    /**
     * Container's getter for ApOverseasLineitemTableEOView1.
     * @return ApOverseasLineitemTableEOView1
     */
    public ViewObjectImpl getApOverseasLineitemTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApOverseasLineitemTableEOView1");
    }
    
    public void invoiceHeaderLinedataload(){
        System.out.println("inside invoiceHeaderLinedataload");
       /* ADFContext afcontext =   ADFContext.getCurrent();
        HttpServletRequest req = (HttpServletRequest) afcontext.getEnvironment().getRequest(); 
        String user = req.getHeader("Proxy-Remote-User")!= null ? req.getHeader("Proxy-Remote-User").toString() : null;
        System.out.println("inside invoiceHeaderLinedataload user details ::"+user);
        System.out.println("Calling the getInvoiceHeaderDetails ");*/
        getInvoiceHeaderDetails("194901");
       
        
    }
    
   
    
    
    public void getInvoiceHeaderDetails(String userId) {
        
             
      System.out.println("inside getInvoiceHeaderDetails===="+userId);
          String form_status = null; 
          
          ADFContext.getCurrent().getPageFlowScope().put("userId", userId); 
      RowSetIterator rowSetIterator = null;
      int newLineNumber = 1;
      try{       
          ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
          ViewCriteria vc = vo.getViewCriteria("OverseasHeaderItemViewCriteria");
          vo.applyViewCriteria(vc);
          vo.setNamedWhereClauseParam("bind_user_id", userId);
          vo.setNamedWhereClauseParam("bind_internalStatus", "NOT_SUBMITTED");
          vo.executeQuery();
          //vc.resetCriteria();
          //vo.clearCache();
          /*  ************************************ */
          System.out.println("First on applying criteria OverseasHeaderItemViewCriteria count::"+vo.getEstimatedRangePageCount());
        if(vo.getEstimatedRowCount()>0 ){
              rowSetIterator = vo.createRowSetIterator(null);
              while(rowSetIterator.hasNext()) {
                  System.out.println("------------- am impl  Inside HasNext() of header ------------");
                  
                  Row headerRow = null;
                  headerRow = rowSetIterator.next();
              if (headerRow !=null && (headerRow.getAttribute("InternalStatus")!=null && headerRow.getAttribute("InternalStatus").equals("NOT_SUBMITTED")
                  )) {
                  form_status = "found" ;
                  System.out.println("Loading data of the currently saved form ");    
                  System.out.println("***** headerRow.getAttribute(\"SupplierName\") ***** "+headerRow.getAttribute("SupplierName"));
                  System.out.println("***** headerRow.getAttribute(\"CertifierName\") ***** "+headerRow.getAttribute("CertifierName"));
                  System.out.println("***** headerRow.getAttribute(\"UserId\") ***** "+headerRow.getAttribute("UserId"));
                  System.out.println("***** headerRow.getAttribute(\"CertifierEmailAdd\") ***** "+headerRow.getAttribute("CertifierEmailAdd"));
                  System.out.println("***** headerRow.getAttribute(\"SiteId\") ***** "+headerRow.getAttribute("SiteId"));
                  System.out.println("***** headerRow.getAttribute(\"SiteName\") ***** "+headerRow.getAttribute("SiteName"));
                  System.out.println("***** headerRow.getAttribute(\"Attr2\") ***** "+headerRow.getAttribute("Attr2"));
                  System.out.println("***** headerRow.getAttribute(\"InvoiceType\") ***** "+headerRow.getAttribute("InvoiceType"));
                  System.out.println("***** headerRow.getAttribute(\"DocumentType\") ***** "+headerRow.getAttribute("DocumentType"));
                  System.out.println("***** headerRow.getAttribute(\"AlternateApprover\") ***** "+headerRow.getAttribute("AlternateApprover"));
                  System.out.println("***** headerRow.getAttribute(\"invoice id\") ***** "+headerRow.getAttribute("InvoiceId"));
                  ADFContext.getCurrent().getPageFlowScope().put("OrgID", headerRow.getAttribute("OrgId"));
                  ADFContext.getCurrent().getPageFlowScope().put("invoiceId", headerRow.getAttribute("InvoiceId"));
                  ADFContext.getCurrent().getPageFlowScope().put("iframeRendered",true); 
                  
                  File f = new File("/u02_sa_soadev/Oracle/Middleware/Upload/194901_Invoice_INPROGRESS.pdf"); //to be remove hardcoding
                  if(f.exists() && !f.isDirectory()) { 

                  ADFContext.getCurrent().getPageFlowScope().put("file_name",userId+"_Invoice_INPROGRESS.pdf");   //194901_Invoice_INPROGRESS.pdf
                  
                  /*added on 27th aug*/
                  ADFContext.getCurrent().getPageFlowScope().put("certifierFlagInScope","0");
                  
                  }
                  vo.setCurrentRow(headerRow);
                  
                  
                  break;   
              }   
               form_status = "not_found" ;    
           }
          }    
          
          if(form_status == null || (form_status!=null && form_status.equals("not_found")) ){
         System.out.println("Creating a new form");
         
         
         // createHeaderRow(userId);           
         ViewObject headerVO= getApInvoiceOverseasTableEOView1();
          Row row = headerVO.createRow();

          //row.setAttribute("isSelected", "N");
          SequenceImpl sequenceImpl=new SequenceImpl("INVOICE_SEQ",getDBTransaction());     
          row.setAttribute("InvoiceId", new DBSequence(sequenceImpl.getSequenceNumber()));  
          row.setAttribute("UserId", userId);
          row.setAttribute("SupplierName", null);
          row.setAttribute("CertifierName", null);
          row.setAttribute("EmployeeNumber", userId);
          row.setAttribute("CertifierEmailAdd", null);
          row.setAttribute("SiteId", null);
          row.setAttribute("SiteName", null);
          row.setAttribute("InvoiceType", null);
          row.setAttribute("DocumentType", null);
          row.setAttribute("AlternateApprover", null);
          row.setAttribute("OrgId", null);
          row.setAttribute("InternalStatus", "NOT_SUBMITTED");
          

          //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
          headerVO.insertRow(row);
          headerVO.setCurrentRow(row);
          getTransaction().commit();
          ADFContext.getCurrent().getPageFlowScope().put("invoiceId", row.getAttribute("InvoiceId"));
              
          ADFContext.getCurrent().getPageFlowScope().put("iframeRendered",false);   
              
              
             /* ViewObjectImpl vo2 = getOverseasHeaderItemView1();
              ViewCriteria vc2 = vo1.getViewCriteria("OverseasHeaderItemViewCriteria");
              vo2.applyViewCriteria(vc1);
              vo2.setNamedWhereClauseParam("bind_user_id", userId);
              vo2.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
              vo2.executeQuery();*/
              
              
              
              
          } 
          
          /*retrieving the line items*/
          
          ViewObjectImpl vo1 =getApOverseasLineitemTableEOView1();
          //ViewCriteria vc1 = vo1.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");
          
          System.out.println("Vo criteria LL:"+ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          vo1.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          //vo1.applyViewCriteria(vc1);
          //vo1.setNamedWhereClauseParam("bind_invoiceId", ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          
          vo1.executeQuery();
          //vc1.resetCriteria();
          //vo1.clearCache();
          System.out.println("Second ApOverseasLineitemTableEOViewCriteria count :: "+vo1.getEstimatedRowCount());
          //System.out.println("After setting the current row::"+vo.getEstimatedRowCount());*/
          
          
          /*retrieving the overseas templates for the given user*/
          
          ViewObjectImpl template_vo =getApOverseasTemplateTableEOView1();
          template_vo.setNamedWhereClauseParam("bind_userId", userId);
          template_vo.executeQuery();
          System.out.println("Total template count for the user :: "+template_vo.getEstimatedRowCount());
          
          
          
          
      } catch (JboSQLException e) {
          e.printStackTrace();
      } catch (Exception e) {
          e.printStackTrace();
          }finally{
          if(rowSetIterator!=null){
              rowSetIterator.closeRowSetIterator();
          }
              
          }
      System.out.println("End: getInvoiceHeaderDetails()" +ADFContext.getCurrent().getPageFlowScope().get("invoiceId"));
          //onAddTemplateRow("194901");
      
      }
    
    public void onAddTemplateRow(String userId){
        System.out.println(" onAddTemplateRow ");
        // createHeaderRow(userId);           
        ViewObject templateVO= getApOverseasTemplateTableEOView1();
         Row row = templateVO.createRow();

         //row.setAttribute("isSelected", "N");
        SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());     
        row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));  
        row.setAttribute("UserId", userId);
        row.setAttribute("SupplierName", null);
        row.setAttribute("TaxRegNumber", null);
        row.setAttribute("SupplierNumber", null);
        row.setAttribute("SiteId", null);
        row.setAttribute("SiteName", null);
        row.setAttribute("InvoiceType", null);
        row.setAttribute("DocumentType", null);
        row.setAttribute("OperatingUnit", null);

         //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
         templateVO.insertRow(row);
         templateVO.setCurrentRow(row);
         //getTransaction().commit();
        
    }
    /*tTemplateDocNAme.setValue(docTypeSoc.getValue());
            itTemplateInvType.setValue(invoiceTypeSoc.getValue());
            itTemplateSuppName.setValue(supNameIt.getValue());
            itTemplateSuppNo.setValue(suppNumIt.getValue());
            itTemplateSiteId.setValue(siteIdIt.getValue());
            itTemplateOpUnit.setValue(operatingUnitIt.getValue());
            itTemplateTaxRegNo.setValue(taxRegIt.getValue());
            itTemplateSiteName.setValue(siteNameIt.getValue());*/
    
        public void saveTemplate(String userId,String supName,String suppNum,String siteId,String operatingUnit,String taxReg,String invoiceType,String docType,String templateName){
            ViewObject templateVO= getApOverseasTemplateTableEOView1();
             Row row = templateVO.createRow();

             //row.setAttribute("isSelected", "N");
            SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());     
            row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));  
            row.setAttribute("UserId", "194901");
            row.setAttribute("SupplierName", supName);
            row.setAttribute("TaxRegNumber", taxReg);
            row.setAttribute("SupplierNumber", suppNum);
            row.setAttribute("SiteId", siteId);
            row.setAttribute("SiteName", null);
            row.setAttribute("InvoiceType", invoiceType);
            row.setAttribute("DocumentType", docType);
            row.setAttribute("OperatingUnit", operatingUnit);
            row.setAttribute("TemplateName", templateName);

             //employee.insertRowAtRangeIndex(lastRowIndex+1, row);
             templateVO.insertRow(row);
             templateVO.setCurrentRow(row);
             getTransaction().commit();
            
        }
   
    public void onAddTemplateRow_new(String userId){
       
        System.out.println("Start: addLineItemRow template new()");
        RowSetIterator maxIdVORowSetIterator = null;
        int newLineNumber = 1;
        try{
        ViewObjectImpl vo =getApOverseasTemplateTableEOView1();
        /* ViewCriteria vc = vo.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);          
        vo.executeQuery();*/
        System.out.println("ViewObjectImpl :: "+vo.getEstimatedRowCount());
        
        /*  ************************************ */
        Row selectedRow=vo.last();
        System.out.println("selectedRow :: "+selectedRow);
           
        /* ************************************** */
        
        int lastRowIndex = vo.getRangeIndexOf(vo.last()); 
        System.out.println("last row index :: "+ lastRowIndex);

        System.out.println("Before creating row count::"+vo.getEstimatedRowCount() +"newLineNumber ::"+newLineNumber);
        // Row row = vo.createRow();
        
        NameValuePairs row = new NameValuePairs();
        //row.setNewRowState(Row.STATUS_INITIALIZED);
            SequenceImpl sequenceImpl=new SequenceImpl("TEMPLATE_SEQ",getDBTransaction());     
            row.setAttribute("TemplateId", new DBSequence(sequenceImpl.getSequenceNumber()));  
            row.setAttribute("UserId", userId);
            row.setAttribute("SupplierName", null);
            row.setAttribute("TaxRegNumber", null);
            row.setAttribute("SupplierNumber", null);
            row.setAttribute("SiteId", null);
            row.setAttribute("SiteName", null);
            row.setAttribute("InvoiceType", null);
            row.setAttribute("DocumentType", null);
            row.setAttribute("OperatingUnit", null);

        System.out.println("Before creating row count::"+vo.getEstimatedRowCount());

        vo.insertRowAtRangeIndex(lastRowIndex+1,vo.createAndInitRow(row));
        
        
        System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
        } catch (JboSQLException e) {

        e.printStackTrace();
        } catch (Exception e) {

        e.printStackTrace();
        }
        System.out.println("End: addLineItemRow()");
        }
    
    
    
   
   
   

    public void addLineItemRow(String invoiceId){ {
            SequenceImpl seq = new SequenceImpl("LINE_ID_SEQ", getDBTransaction());
            Number seqNextval = seq.getSequenceNumber();
            String seqVal = seqNextval.toString();
        System.out.println("Start: addLineItemRow()");
        RowSetIterator maxIdVORowSetIterator = null;
        int newLineNumber = 1;
        try{       
            ViewObjectImpl vo =getApOverseasLineitemTableEOView1();
           /* ViewCriteria vc = vo.getViewCriteria("ApOverseasLineitemTableEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);          
            vo.executeQuery();*/
            System.out.println("ViewObjectImpl :: "+vo.getEstimatedRowCount());
            
            /*  ************************************ */
            Row selectedRow=vo.last();
            System.out.println("selectedRow :: "+selectedRow);
               if (selectedRow!=null){
                   System.out.println("LineNumber :"+selectedRow.getAttribute("LineNumber"));                  
                   if (selectedRow.getAttribute("LineNumber")!=null){
                       newLineNumber = Integer.parseInt(selectedRow.getAttribute("LineNumber").toString());
                       newLineNumber++;            
                   }
                }
            
            /* ************************************** */
            
            int lastRowIndex = vo.getRangeIndexOf(vo.last()); 
            System.out.println("last row index :: "+ lastRowIndex);

            System.out.println("Before creating row count::"+vo.getEstimatedRowCount() +"newLineNumber ::"+newLineNumber);
           // Row row = vo.createRow();
           
            NameValuePairs nvp = new NameValuePairs();
            //row.setNewRowState(Row.STATUS_INITIALIZED);
            nvp.setAttribute("InvoiceId", invoiceId);  
            nvp.setAttribute("LineNumber", newLineNumber);
            nvp.setAttribute("LinePoNum", "");
            nvp.setAttribute("PoLineNum", null);
            nvp.setAttribute("LineDescription", "newly added row");
            nvp.setAttribute("Quantity", null);
            nvp.setAttribute("Uom", null);
            nvp.setAttribute("UnitPrice", null);
            nvp.setAttribute("LineTotalAmount", null);
            nvp.setAttribute("TaxRate", null);
            nvp.setAttribute("TaxRateCode", null);
            nvp.setAttribute("TaxAmountLineitem", null);
            nvp.setAttribute("Attr9", seqVal);
    //        row.setAttribute("Attr10", null);
           //vo.createAndInitRow(nvp);
            //row.setNewRowState(Row.STATUS_NEW);
    //        vo.clearCache();
           System.out.println("Before creating row count::"+vo.getEstimatedRowCount());
           // vo.insertRowAtRangeIndex(lastRowIndex+1, row);
           vo.insertRowAtRangeIndex(lastRowIndex+1,vo.createAndInitRow(nvp));
            
            
            System.out.println("After setting the current row::"+vo.getEstimatedRowCount());
        //            getDBTransaction().commit();
        } catch (JboSQLException e) {
        //            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
        //            getDBTransaction().rollback();
            e.printStackTrace();
        }
        System.out.println("End: addLineItemRow()");
        }
    }
        
    public void saveAllFormDetails(String invoiceId,String siteId,String supName,String currency,String employeeNo){
         System.out.println(invoiceId +"-------employeeNo---------"+"-------------"+"getApOverseasLineitemTableEOView1()1 estimated row count ::"+getApOverseasLineitemTableEOView1().getEstimatedRowCount()); 
        System.out.println(invoiceId+"--------------"+"getOverseasHeaderItemView1() estimated row count ::"+getApInvoiceOverseasTableEOView1().getEstimatedRowCount()); 
        
                RowSetIterator rowSetIterator = null;
                ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
               /* ViewCriteria vc = vo.getViewCriteria("OverseasHeaderItemViewCriteria");
                vo.applyViewCriteria(vc);
                System.out.println("kjkjkj");
                vo.setNamedWhereClauseParam("bind_invoiceId", invoiceId);
                vo.setNamedWhereClauseParam("bind_user_id", employeeNo);
                vo.executeQuery(); 
                vc.resetCriteria();
                vo.clearCache();
                System.out.println("kjkjkj");*/
                System.out.println("getOverseasHeaderItemView1() estimated row count ::"+getApInvoiceOverseasTableEOView1().getEstimatedRowCount()); 
        
                if(vo.getEstimatedRowCount()>0 ){
                      rowSetIterator = vo.createRowSetIterator(null);
                      while(rowSetIterator.hasNext()) {
                          Row headerRow = null;
                          headerRow = rowSetIterator.next();
                          System.out.println("***** headerRow.getAttribute(\"SupplierName\") ***** "+headerRow.getAttribute("SupplierName"));
                          System.out.println("***** headerRow.getAttribute(\"CertifierName\") ***** "+headerRow.getAttribute("CertifierName"));
                          System.out.println("***** headerRow.getAttribute(\"EmployeeNumber\") ***** "+headerRow.getAttribute("EmployeeNumber"));
                          System.out.println("***** headerRow.getAttribute(\"CertifierEmailAdd\") ***** "+headerRow.getAttribute("CertifierEmailAdd"));
                          System.out.println("***** headerRow.getAttribute(\"InvoiceId\") ***** "+headerRow.getAttribute("InvoiceId") );
                          
                         /* headerRow.setAttribute("SiteId", siteId); 
                          headerRow.setAttribute("SupplierName", supName); 
                          headerRow.setAttribute("CurrencyCode", currency);
                          headerRow.setAttribute("EmployeeNumber", employeeNo);*/
                      }
                } 
                
                RowSetIterator rowSetIterator1 = null;
                ViewObjectImpl vo1 = getApOverseasLineitemTableEOView1();
                if(vo1.getEstimatedRowCount() > 0){
                    rowSetIterator1 = vo1.createRowSetIterator(null);
                    while(rowSetIterator1.hasNext()) {
                    Row headerRow = null;
                    headerRow = rowSetIterator1.next();
                    headerRow.setAttribute("Attr10","null");
                    }
                    
                }
                
      getDBTransaction().commit();
      //getApOverseasLineitemTableEOView1().getDBTransaction().commit();
      //getOverseasHeaderItemView1().getDBTransaction().commit();
    }

    public void saveAPOperationDetails(Boolean flag,String invoiceId, String supName,String siteId,String invNum,String taxRegNum,
                                String poNum,String lineTotal,String certName,String currency,
                                String invDate,String taxTotal,String headerTotal,String certEmail,
                                String rejReason,String comments,String certComments,
                                String reason,String type,String status,
                                String docType,String invoiceType,String operatingUnit,String invalidReasonType,String invalidReason,String employeeNo) {
        System.out.println("Start: saveAPOperationDetails()");
        System.out.println("-------------invoiceId: "+invoiceId);
        System.out.println("-------------supName: "+supName);
        System.out.println("-------------siteId: "+siteId);
        System.out.println("-------------invNum: "+invNum);
        System.out.println("-------------taxRegNum: "+taxRegNum);
        System.out.println("-------------poNum: "+poNum);
        System.out.println("-------------lineTotal: "+lineTotal);
        
        System.out.println("-------------headerTotal: "+headerTotal);
        System.out.println("-------------taxTotal: "+taxTotal);
        
        System.out.println("-------------certName: "+certName);
        System.out.println("-------------currency: "+currency);
        System.out.println("-------------reason: "+reason);
        System.out.println("-------------type: "+type);
        System.out.println("--------------InvalidReasonType; "+invalidReasonType);
        System.out.println("--------------InvalidReason: "+invalidReason);
        System.out.println("--------------Employee No: "+employeeNo);
      //  String invalidReasonType = (String)AdfFacesContext.getCurrentInstance().getPageFlowScope().get("invalidReasonType");
        RowSetIterator rowSetIterator = null;
        RowSetIterator rsi= null;
        RowSetIterator rowIt= null;
        try{       
            ViewObjectImpl vo = getApInvoiceOverseasTableEOView1();
            ViewCriteria vc = vo.getViewCriteria("HeaderDetailsEOViewCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            vo.executeQuery();          
            if(vo.getEstimatedRowCount() > 0){               
                rowSetIterator = vo.createRowSetIterator(null);
                while(rowSetIterator.hasNext()) {
                    System.out.println("-------------Inside HasNext()------------");
                    Row row = rowSetIterator.next();
                    if (null != row) {
                        System.out.println("-------------supName: "+supName);
                        row.setAttribute("SiteId", siteId); 
                        row.setAttribute("SupplierName", supName); 
                        
                        
                        //Populate SupplierId
                        ApplicationModule am = null;
                        try {
                            String amDef = "model.EbsAM";
                            String config = "EbsAMLocal";
                            am = Configuration.createRootApplicationModule(amDef, config);
                            EBS_AMImpl amImpl = (EBS_AMImpl)am;                            
                            ViewObjectImpl suppNameVO = amImpl.getSitesVO1();
                            ViewCriteria viewCrit = suppNameVO.getViewCriteria("SitesVOCriteriaSupNameSiteID");
                            suppNameVO.applyViewCriteria(viewCrit);
                            suppNameVO.setNamedWhereClauseParam("bindVendorName", supName);
                            suppNameVO.setNamedWhereClauseParam("bvSiteID", siteId);
                            suppNameVO.executeQuery();
                            
                            
                            
                            
                            if(suppNameVO.getEstimatedRowCount()>0) {
                                System.out.println("--- Match found for Supplier Name : "+suppNameVO.getEstimatedRowCount()+" records.");
                                 rowIt = suppNameVO.createRowSetIterator(null);
                                while(rowIt.hasNext()) {
                                    Row rowData = rowIt.next();
                                    try {
                                        System.out.println("--- Matched Supplier Number : "+rowData.getAttribute("VendorNumber"));
                                        BigDecimal  vendorId = rowData.getAttribute("VendorId") == null ? null : (BigDecimal)rowData.getAttribute("VendorId");                                        
                                        BigDecimal  orgId = rowData.getAttribute("OrgId") == null ? null : (BigDecimal)rowData.getAttribute("OrgId");
    //                                        System.out.println("vendorId****"+vendorId);
    //                                        System.out.println("orgId****"+orgId);
                                        
                                        row.setAttribute("SupplierId",  vendorId == null ? null : vendorId.intValue()+"");     
                                        row.setAttribute("OrgId",       orgId == null ? null : orgId.intValue()+""); 
                                    } catch(Exception e) {
                                        e.printStackTrace();
                                    }
                                }
                            }
                        } catch(Exception ex) {
                        ex.printStackTrace();
                        } finally {
                            if(am!=null) {
                                Configuration.releaseRootApplicationModule(am, false);
                            }
                        }
                        
                        row.setAttribute("InvoiceNumber", invNum); 
                        row.setAttribute("TaxRegNumber", taxRegNum); 
                        row.setAttribute("PoNumber", poNum); 
                        row.setAttribute("Attr1", lineTotal); 
                        row.setAttribute("CertifierName", certName); 
                        row.setAttribute("CurrencyCode", currency); 
                        row.setAttribute("InvoiceDate", invDate); 
                        row.setAttribute("TaxAmount", taxTotal); 
                        row.setAttribute("InvoiceTotAmount", headerTotal); 
                        row.setAttribute("CertifierEmailAdd", certEmail); 
                        row.setAttribute("EmployeeNumber", employeeNo);
                        System.out.println("updated Employee No"+row.getAttribute("EmployeeNumber"));
                        row.setAttribute("ApOperationComments", comments); 
                        row.setAttribute("CertifierRejReason", rejReason); 
                        row.setAttribute("CertifierRejComments", certComments); 
                        
                        row.setAttribute("InvalidCode", reason); 
                        row.setAttribute("InvalidReasonTypeId", type); 
                        
                        //TO-DO : To be changed the quick-fix
                        if(row.getAttribute("InvalidCode")!=null && (!row.getAttribute("InvalidCode").toString().equals("16") && !row.getAttribute("InvalidCode").toString().equals("20"))) {
                            System.out.println("setting InvalidReason and InvalidReasonType as NONE");
                            row.setAttribute("InvalidReason", "NONE"); 
                            row.setAttribute("InvalidReasonType", "NONE");     
                        } else {
                            row.setAttribute("InvalidReason", invalidReason); 
                            System.out.println(" After saving reason"+invalidReason);
                            row.setAttribute("InvalidReasonType", invalidReasonType);     
                            System.out.println(" After saving reasontype"+invalidReasonType); 
                        }
                        
    //                  row.setAttribute("InvalidReason", invalidReason);
    //                  System.out.println(" After saving reason"+invalidReason);
    //                  row.setAttribute("InvalidReasonType", invalidReasonType);
    //                        System.out.println(" After saving reasontype"+invalidReasonType);

                        row.setAttribute("Status", status); 
                        row.setAttribute("DocumentType", docType); 
                        row.setAttribute("InvoiceType", invoiceType);                                           
                        row.setAttribute("Attr2", operatingUnit); 
                        
                       // java.util.Date utilDate = new java.util.Date();
                       // java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                        System.out.println("saveap operation");
                        row.setAttribute("ModifiedOn",oracle.jbo.domain.Date.getCurrentDate()); 
                        System.out.println("ModifiedOn "+oracle.jbo.domain.Date.getCurrentDate());
                        row.setAttribute("ModifiedBy", "ADF"); 
                        System.out.println("ModifiedBy ADF");
                        row.setAttribute("Attr9", flag==true?"From_ADF_APOps_Submit":"From_ADF_APOps_Save");
                        
                        System.out.println("Attr9 is from_adf");
                        
                        
                        System.out.println("===== AP OPS Save/Submit Operation ====="+new Date());
                        System.out.println(
                            "flag:"+flag+", "+
                            "invoiceId:"+invoiceId+", "+
                            "supName:"+supName+", "+
                            "siteId:"+siteId+", "+
                            "invNum:"+invNum+", "+
                            "taxRegNum:"+taxRegNum+", "+
                            "poNum:"+poNum+", "+
                            "lineTotal:"+lineTotal+", "+
                            "certName:"+certName+", "+
                            "currency:"+currency+", "+
                            "invDate:"+invDate+", "+
                            "taxTotal:"+taxTotal+", "+
                            "headerTotal:"+headerTotal+", "+
                            "certEmail:"+certEmail+", "+
                            "rejReason:"+rejReason+", "+
                            "comments:"+comments+", "+
                            "certComments:"+certComments+", "+
                            "reason:"+reason+", "+
                            "type:"+type+", "+
                            "status:"+status+", "+
                            "docType:"+docType+", "+
                            "invoiceType:"+invoiceType+", "+
                            "operatingUnit:"+operatingUnit+", "+
                            "invalidReasonType:"+invalidReasonType+", "+
                            "invalidReason:"+invalidReason+" , employee no "+employeeNo
                        );
                    }
                            
                }
            }
            
            
           //Tax rate ---- 
            
           HashMap<String, BigDecimal> taxRatesMasterList = executeTaxRateCodeResultSet();
            
            ViewObjectImpl lineItems = getApOverseasLineitemTableEOView1();
            ViewCriteria lineItemsVc = lineItems.getViewCriteria("LineItemDetailsEOViewCriteria");
            lineItems.applyViewCriteria(lineItemsVc);
            lineItems.setNamedWhereClauseParam("bindInvoiceId", invoiceId);
            lineItems.executeQuery();
            System.out.println("-------------Line Item Rows: "+lineItems.getEstimatedRowCount());
            
             rsi = lineItems.createRowSetIterator(null);                  
            while (rsi.hasNext()) {
                Row lineItem = rsi.next();
                String taxRateCode = (lineItem.getAttribute("TaxRateCode")==null) ? null : (String)lineItem.getAttribute("TaxRateCode");
                //oracle.jbo.domain.Number taxRate = (lineItem.getAttribute("TaxRate")==null) ? null : (oracle.jbo.domain.Number)lineItem.getAttribute("TaxRate");
                System.out.println("TaxRateCode in LineItem ::: "+taxRateCode);
                if(taxRateCode!=null) {                    
                    BigDecimal taxRateFromMasterList = taxRatesMasterList.get(taxRateCode);
                    System.out.println("taxRateFromMasterList ::: "+taxRateFromMasterList);
                    if(taxRateFromMasterList!=null) {                        
                        oracle.jbo.domain.Number taxRate = new oracle.jbo.domain.Number(taxRateFromMasterList.doubleValue());
                        System.out.println("Final tax rate ::: "+ taxRate);
                        lineItem.setAttribute("TaxRate", taxRate);
                    }
                    else{
                        lineItem.setAttribute("TaxRateCode", null);
                        lineItem.setAttribute("TaxRate", null);
                    }
                }     
            }
            
            
            getDBTransaction().commit();
            System.out.println("-------------Commited------------");
            
           // executeHeaderLineItemDetails(invoiceId); commented on 24th august
        }catch (JboSQLException e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        } catch (Exception e) {
            getDBTransaction().rollback();
            e.printStackTrace();
        }finally{
                if(rowSetIterator!=null) {
                    try {
                        rowSetIterator.closeRowSetIterator();
                    } catch(Exception ex) {
                        ex.printStackTrace();
                    
                }
                }
            if(rowIt!=null) {
                try {
                    rowIt.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
                
        }
        System.out.println("End: saveAPOperationDetails()");
    }


    public HashMap<String, BigDecimal> executeTaxRateCodeResultSet() {
        HashMap<String, BigDecimal> retmap = new HashMap<String, BigDecimal>();
        ApplicationModule am = null;
        RowSetIterator rsi = null;
        try {
            String amDef = "model.EbsAM";
            String config = "EbsAMLocal";
            am = Configuration.createRootApplicationModule(amDef, config);
            EBS_AMImpl amImpl = (EBS_AMImpl)am;                            
            ViewObjectImpl taxRateCodeMasterListVO1 = amImpl.getTaxRateCodeMasterListVO1();
            System.out.println("-----executeTaxRateCodeResultSet-----");
            taxRateCodeMasterListVO1.executeQuery();
            
            if(taxRateCodeMasterListVO1.getEstimatedRowCount()>0){                                         
                rsi = taxRateCodeMasterListVO1.createRowSetIterator(null);                  
               while (rsi.hasNext()) {                   
                   Row taxRow = rsi.next();
                   //System.out.println("PercentageRate ::"+taxRow.getAttribute("PercentageRate"));
                   // Add your logic here if condition
                   BigDecimal taxRate = (BigDecimal)taxRow.getAttribute("PercentageRate");
                   String taxRateCode=taxRow.getAttribute("TaxRateCode").toString();
                   System.out.println("key taxRateCode ::: "+taxRateCode + " value taxRate ::: "+ taxRate);
                   retmap.put(taxRateCode, taxRate);                   
               }
            }
        } catch(Exception ex) {
           ex.printStackTrace();
        } finally {
           if(am!=null) {
               Configuration.releaseRootApplicationModule(am, false);
           }
            if(rsi!=null) {
                try {
                    rsi.closeRowSetIterator();
                } catch(Exception ex) {
                    ex.printStackTrace();
                
            }
            }
        }
        return retmap;
    }

    /**
     * Container's getter for ApOverseasTemplateTableEOView1.
     * @return ApOverseasTemplateTableEOView1
     */
    public ViewObjectImpl getApOverseasTemplateTableEOView1() {
        return (ViewObjectImpl)findViewObject("ApOverseasTemplateTableEOView1");
    }


    /**
     * Container's getter for DuplicateRecordCheckVO1_1.
     * @return DuplicateRecordCheckVO1_1
     */
    public ViewObjectImpl getDuplicateRecordCheckVO1() {
        return (ViewObjectImpl)findViewObject("DuplicateRecordCheckVO1");
    }

    /**
     * Container's getter for DuplicateInvoiceExclusionStatusListVO1Iterator1.
     * @return DuplicateInvoiceExclusionStatusListVO1Iterator1
     */
    public ViewObjectImpl getDuplicateInvoiceExclusionStatusListVO1Iterator1() {
        return (ViewObjectImpl)findViewObject("DuplicateInvoiceExclusionStatusListVO1Iterator1");
    }
}
